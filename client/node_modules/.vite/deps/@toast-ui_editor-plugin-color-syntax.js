import {
  __commonJS
} from "./chunk-USJHI7ER.js";

// node_modules/tui-color-picker/dist/tui-color-picker.js
var require_tui_color_picker = __commonJS({
  "node_modules/tui-color-picker/dist/tui-color-picker.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory();
      else if (typeof define === "function" && define.amd)
        define([], factory);
      else if (typeof exports === "object")
        exports["colorPicker"] = factory();
      else
        root["tui"] = root["tui"] || {}, root["tui"]["colorPicker"] = factory();
    })(window, function() {
      return (
        /******/
        function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, { enumerable: true, get: getter });
            }
          };
          __webpack_require__.r = function(exports2) {
            if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
              Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
            }
            Object.defineProperty(exports2, "__esModule", { value: true });
          };
          __webpack_require__.t = function(value, mode) {
            if (mode & 1)
              value = __webpack_require__(value);
            if (mode & 8)
              return value;
            if (mode & 4 && typeof value === "object" && value && value.__esModule)
              return value;
            var ns = /* @__PURE__ */ Object.create(null);
            __webpack_require__.r(ns);
            Object.defineProperty(ns, "default", { enumerable: true, value });
            if (mode & 2 && typeof value != "string")
              for (var key in value)
                __webpack_require__.d(ns, key, (function(key2) {
                  return value[key2];
                }).bind(null, key));
            return ns;
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? (
              /******/
              function getDefault() {
                return module2["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module2;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "dist";
          return __webpack_require__(__webpack_require__.s = 33);
        }([
          /* 0 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function extend(target, objects) {
              var hasOwnProp = Object.prototype.hasOwnProperty;
              var source, prop, i, len;
              for (i = 1, len = arguments.length; i < len; i += 1) {
                source = arguments[i];
                for (prop in source) {
                  if (hasOwnProp.call(source, prop)) {
                    target[prop] = source[prop];
                  }
                }
              }
              return target;
            }
            module2.exports = extend;
          },
          /* 1 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function isArray(obj) {
              return obj instanceof Array;
            }
            module2.exports = isArray;
          },
          /* 2 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var isArray = __webpack_require__(1);
            var forEachArray = __webpack_require__(6);
            var forEachOwnProperties = __webpack_require__(7);
            function forEach(obj, iteratee, context) {
              if (isArray(obj)) {
                forEachArray(obj, iteratee, context);
              } else {
                forEachOwnProperties(obj, iteratee, context);
              }
            }
            module2.exports = forEach;
          },
          /* 3 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function isUndefined(obj) {
              return obj === void 0;
            }
            module2.exports = isUndefined;
          },
          /* 4 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var browser = __webpack_require__(22);
            var forEach = __webpack_require__(2);
            var forEachArray = __webpack_require__(6);
            var forEachOwnProperties = __webpack_require__(7);
            var sendHostname = __webpack_require__(37);
            var currentId = 0;
            var utils = {
              /**
               * Get the number of properties in the object.
               * @param {Object} obj - object
               * @returns {number}
               */
              getLength: function(obj) {
                var length = 0;
                forEachOwnProperties(obj, function() {
                  length += 1;
                });
                return length;
              },
              /**
               * Constructs a new array by executing the provided callback function.
               * @param {Object|Array} obj - object or array to be traversed
               * @param {function} iteratee - callback function
               * @param {Object} context - context of callback function
               * @returns {Array}
               */
              map: function(obj, iteratee, context) {
                var result = [];
                forEach(obj, function() {
                  result.push(iteratee.apply(context || null, arguments));
                });
                return result;
              },
              /**
               * Construct a new array with elements that pass the test by the provided callback function.
               * @param {Array|NodeList|Arguments} arr - array to be traversed
               * @param {function} iteratee - callback function
               * @param {Object} context - context of callback function
               * @returns {Array}
               */
              filter: function(arr, iteratee, context) {
                var result = [];
                forEachArray(arr, function(elem) {
                  if (iteratee.apply(context || null, arguments)) {
                    result.push(elem);
                  }
                });
                return result;
              },
              /**
               * Create an unique id for a color-picker instance.
               * @returns {number}
               */
              generateId: function() {
                currentId += 1;
                return currentId;
              },
              /**
               * True when browser is below IE8.
               */
              isOldBrowser: function() {
                return browser.msie && browser.version < 9;
              }(),
              /**
               * send host name
               * @ignore
               */
              sendHostName: function() {
                sendHostname("color-picker", "UA-129987462-1");
              }
            };
            module2.exports = utils;
          },
          /* 5 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var isArray = __webpack_require__(1);
            function inArray(searchElement, array, startIndex) {
              var i;
              var length;
              startIndex = startIndex || 0;
              if (!isArray(array)) {
                return -1;
              }
              if (Array.prototype.indexOf) {
                return Array.prototype.indexOf.call(array, searchElement, startIndex);
              }
              length = array.length;
              for (i = startIndex; startIndex >= 0 && i < length; i += 1) {
                if (array[i] === searchElement) {
                  return i;
                }
              }
              return -1;
            }
            module2.exports = inArray;
          },
          /* 6 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function forEachArray(arr, iteratee, context) {
              var index = 0;
              var len = arr.length;
              context = context || null;
              for (; index < len; index += 1) {
                if (iteratee.call(context, arr[index], index, arr) === false) {
                  break;
                }
              }
            }
            module2.exports = forEachArray;
          },
          /* 7 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function forEachOwnProperties(obj, iteratee, context) {
              var key;
              context = context || null;
              for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                  if (iteratee.call(context, obj[key], key, obj) === false) {
                    break;
                  }
                }
              }
            }
            module2.exports = forEachOwnProperties;
          },
          /* 8 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var addClass = __webpack_require__(39);
            var isFunction = __webpack_require__(13);
            var isNumber = __webpack_require__(41);
            var isUndefined = __webpack_require__(3);
            var domUtil = __webpack_require__(9);
            var Collection = __webpack_require__(19);
            var util = __webpack_require__(4);
            function View(options, container) {
              var id = util.generateId();
              options = options || {};
              if (isUndefined(container)) {
                container = domUtil.appendHTMLElement("div");
              }
              addClass(container, "tui-view-" + id);
              this.id = id;
              this.container = container;
              this.childs = new Collection(function(view) {
                return view.id;
              });
              this.parent = null;
            }
            View.prototype.addChild = function(view, fn) {
              if (fn) {
                fn.call(view, this);
              }
              view.parent = this;
              this.childs.add(view);
            };
            View.prototype.removeChild = function(id, fn) {
              var view = isNumber(id) ? this.childs.items[id] : id;
              if (fn) {
                fn.call(view, this);
              }
              this.childs.remove(view.id);
            };
            View.prototype.render = function() {
              this.childs.each(function(childView) {
                childView.render();
              });
            };
            View.prototype.recursive = function(fn, skipThis) {
              if (!isFunction(fn)) {
                return;
              }
              if (!skipThis) {
                fn(this);
              }
              this.childs.each(function(childView) {
                childView.recursive(fn);
              });
            };
            View.prototype.resize = function() {
              var args = Array.prototype.slice.call(arguments);
              var parent = this.parent;
              while (parent) {
                if (isFunction(parent._onResize)) {
                  parent._onResize.apply(parent, args);
                }
                parent = parent.parent;
              }
            };
            View.prototype._beforeDestroy = function() {
            };
            View.prototype._destroy = function() {
              this._beforeDestroy();
              this.container.innerHTML = "";
              this.id = this.parent = this.childs = this.container = null;
            };
            View.prototype.destroy = function(isChildView) {
              if (this.childs) {
                this.childs.each(function(childView) {
                  childView.destroy(true);
                  childView._destroy();
                });
                this.childs.clear();
              }
              if (isChildView) {
                return;
              }
              this._destroy();
            };
            View.prototype.getViewBound = function() {
              var bound = this.container.getBoundingClientRect();
              return {
                x: bound.left,
                y: bound.top,
                width: bound.right - bound.left,
                height: bound.bottom - bound.top
              };
            };
            module2.exports = View;
          },
          /* 9 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var domUtil = {
              /**
               * Create DOM element and return it.
               * @param {string} tagName Tag name to append.
               * @param {HTMLElement} [container] HTML element will be parent to created element.
               * if not supplied, will use **document.body**
               * @param {string} [className] Design class names to appling created element.
               * @returns {HTMLElement} HTML element created.
               */
              appendHTMLElement: function(tagName, container, className) {
                var el = document.createElement(tagName);
                el.className = className || "";
                if (container) {
                  container.appendChild(el);
                } else {
                  document.body.appendChild(el);
                }
                return el;
              }
            };
            module2.exports = domUtil;
          },
          /* 10 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var extend = __webpack_require__(0);
            var isExisty = __webpack_require__(20);
            var isString = __webpack_require__(11);
            var isObject = __webpack_require__(21);
            var isArray = __webpack_require__(1);
            var isFunction = __webpack_require__(13);
            var forEach = __webpack_require__(2);
            var R_EVENTNAME_SPLIT = /\s+/g;
            function CustomEvents() {
              this.events = null;
              this.contexts = null;
            }
            CustomEvents.mixin = function(func) {
              extend(func.prototype, CustomEvents.prototype);
            };
            CustomEvents.prototype._getHandlerItem = function(handler, context) {
              var item = { handler };
              if (context) {
                item.context = context;
              }
              return item;
            };
            CustomEvents.prototype._safeEvent = function(eventName) {
              var events = this.events;
              var byName;
              if (!events) {
                events = this.events = {};
              }
              if (eventName) {
                byName = events[eventName];
                if (!byName) {
                  byName = [];
                  events[eventName] = byName;
                }
                events = byName;
              }
              return events;
            };
            CustomEvents.prototype._safeContext = function() {
              var context = this.contexts;
              if (!context) {
                context = this.contexts = [];
              }
              return context;
            };
            CustomEvents.prototype._indexOfContext = function(ctx) {
              var context = this._safeContext();
              var index = 0;
              while (context[index]) {
                if (ctx === context[index][0]) {
                  return index;
                }
                index += 1;
              }
              return -1;
            };
            CustomEvents.prototype._memorizeContext = function(ctx) {
              var context, index;
              if (!isExisty(ctx)) {
                return;
              }
              context = this._safeContext();
              index = this._indexOfContext(ctx);
              if (index > -1) {
                context[index][1] += 1;
              } else {
                context.push([ctx, 1]);
              }
            };
            CustomEvents.prototype._forgetContext = function(ctx) {
              var context, contextIndex;
              if (!isExisty(ctx)) {
                return;
              }
              context = this._safeContext();
              contextIndex = this._indexOfContext(ctx);
              if (contextIndex > -1) {
                context[contextIndex][1] -= 1;
                if (context[contextIndex][1] <= 0) {
                  context.splice(contextIndex, 1);
                }
              }
            };
            CustomEvents.prototype._bindEvent = function(eventName, handler, context) {
              var events = this._safeEvent(eventName);
              this._memorizeContext(context);
              events.push(this._getHandlerItem(handler, context));
            };
            CustomEvents.prototype.on = function(eventName, handler, context) {
              var self2 = this;
              if (isString(eventName)) {
                eventName = eventName.split(R_EVENTNAME_SPLIT);
                forEach(eventName, function(name) {
                  self2._bindEvent(name, handler, context);
                });
              } else if (isObject(eventName)) {
                context = handler;
                forEach(eventName, function(func, name) {
                  self2.on(name, func, context);
                });
              }
            };
            CustomEvents.prototype.once = function(eventName, handler, context) {
              var self2 = this;
              if (isObject(eventName)) {
                context = handler;
                forEach(eventName, function(func, name) {
                  self2.once(name, func, context);
                });
                return;
              }
              function onceHandler() {
                handler.apply(context, arguments);
                self2.off(eventName, onceHandler, context);
              }
              this.on(eventName, onceHandler, context);
            };
            CustomEvents.prototype._spliceMatches = function(arr, predicate) {
              var i = 0;
              var len;
              if (!isArray(arr)) {
                return;
              }
              for (len = arr.length; i < len; i += 1) {
                if (predicate(arr[i]) === true) {
                  arr.splice(i, 1);
                  len -= 1;
                  i -= 1;
                }
              }
            };
            CustomEvents.prototype._matchHandler = function(handler) {
              var self2 = this;
              return function(item) {
                var needRemove = handler === item.handler;
                if (needRemove) {
                  self2._forgetContext(item.context);
                }
                return needRemove;
              };
            };
            CustomEvents.prototype._matchContext = function(context) {
              var self2 = this;
              return function(item) {
                var needRemove = context === item.context;
                if (needRemove) {
                  self2._forgetContext(item.context);
                }
                return needRemove;
              };
            };
            CustomEvents.prototype._matchHandlerAndContext = function(handler, context) {
              var self2 = this;
              return function(item) {
                var matchHandler = handler === item.handler;
                var matchContext = context === item.context;
                var needRemove = matchHandler && matchContext;
                if (needRemove) {
                  self2._forgetContext(item.context);
                }
                return needRemove;
              };
            };
            CustomEvents.prototype._offByEventName = function(eventName, handler) {
              var self2 = this;
              var andByHandler = isFunction(handler);
              var matchHandler = self2._matchHandler(handler);
              eventName = eventName.split(R_EVENTNAME_SPLIT);
              forEach(eventName, function(name) {
                var handlerItems = self2._safeEvent(name);
                if (andByHandler) {
                  self2._spliceMatches(handlerItems, matchHandler);
                } else {
                  forEach(handlerItems, function(item) {
                    self2._forgetContext(item.context);
                  });
                  self2.events[name] = [];
                }
              });
            };
            CustomEvents.prototype._offByHandler = function(handler) {
              var self2 = this;
              var matchHandler = this._matchHandler(handler);
              forEach(this._safeEvent(), function(handlerItems) {
                self2._spliceMatches(handlerItems, matchHandler);
              });
            };
            CustomEvents.prototype._offByObject = function(obj, handler) {
              var self2 = this;
              var matchFunc;
              if (this._indexOfContext(obj) < 0) {
                forEach(obj, function(func, name) {
                  self2.off(name, func);
                });
              } else if (isString(handler)) {
                matchFunc = this._matchContext(obj);
                self2._spliceMatches(this._safeEvent(handler), matchFunc);
              } else if (isFunction(handler)) {
                matchFunc = this._matchHandlerAndContext(handler, obj);
                forEach(this._safeEvent(), function(handlerItems) {
                  self2._spliceMatches(handlerItems, matchFunc);
                });
              } else {
                matchFunc = this._matchContext(obj);
                forEach(this._safeEvent(), function(handlerItems) {
                  self2._spliceMatches(handlerItems, matchFunc);
                });
              }
            };
            CustomEvents.prototype.off = function(eventName, handler) {
              if (isString(eventName)) {
                this._offByEventName(eventName, handler);
              } else if (!arguments.length) {
                this.events = {};
                this.contexts = [];
              } else if (isFunction(eventName)) {
                this._offByHandler(eventName);
              } else if (isObject(eventName)) {
                this._offByObject(eventName, handler);
              }
            };
            CustomEvents.prototype.fire = function(eventName) {
              this.invoke.apply(this, arguments);
            };
            CustomEvents.prototype.invoke = function(eventName) {
              var events, args, index, item;
              if (!this.hasListener(eventName)) {
                return true;
              }
              events = this._safeEvent(eventName);
              args = Array.prototype.slice.call(arguments, 1);
              index = 0;
              while (events[index]) {
                item = events[index];
                if (item.handler.apply(item.context, args) === false) {
                  return false;
                }
                index += 1;
              }
              return true;
            };
            CustomEvents.prototype.hasListener = function(eventName) {
              return this.getListenerLength(eventName) > 0;
            };
            CustomEvents.prototype.getListenerLength = function(eventName) {
              var events = this._safeEvent(eventName);
              return events.length;
            };
            module2.exports = CustomEvents;
          },
          /* 11 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function isString(obj) {
              return typeof obj === "string" || obj instanceof String;
            }
            module2.exports = isString;
          },
          /* 12 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var hexRX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i;
            var colorUtil = {
              /**
               * pad left zero characters.
               * @param {number} number number value to pad zero.
               * @param {number} length pad length to want.
               * @returns {string} padded string.
               */
              leadingZero: function(number, length) {
                var zero = "";
                var i = 0;
                if ((number + "").length > length) {
                  return number + "";
                }
                for (; i < length - 1; i += 1) {
                  zero += "0";
                }
                return (zero + number).slice(length * -1);
              },
              /**
               * Check validate of hex string value is RGB
               * @param {string} str - rgb hex string
               * @returns {boolean} return true when supplied str is valid RGB hex string
               */
              isValidRGB: function(str) {
                return hexRX.test(str);
              },
              // @license RGB <-> HSV conversion utilities based off of http://www.cs.rit.edu/~ncs/color/t_convert.html
              /**
               * Convert color hex string to rgb number array
               * @param {string} hexStr - hex string
               * @returns {number[]} rgb numbers
               */
              hexToRGB: function(hexStr) {
                var r, g, b;
                if (!colorUtil.isValidRGB(hexStr)) {
                  return false;
                }
                hexStr = hexStr.substring(1);
                r = parseInt(hexStr.substr(0, 2), 16);
                g = parseInt(hexStr.substr(2, 2), 16);
                b = parseInt(hexStr.substr(4, 2), 16);
                return [r, g, b];
              },
              /**
               * Convert rgb number to hex string
               * @param {number} r - red
               * @param {number} g - green
               * @param {number} b - blue
               * @returns {string|boolean} return false when supplied rgb number is not valid. otherwise, converted hex string
               */
              rgbToHEX: function(r, g, b) {
                var hexStr = "#" + colorUtil.leadingZero(r.toString(16), 2) + colorUtil.leadingZero(g.toString(16), 2) + colorUtil.leadingZero(b.toString(16), 2);
                if (colorUtil.isValidRGB(hexStr)) {
                  return hexStr;
                }
                return false;
              },
              /**
               * Convert rgb number to HSV value
               * @param {number} r - red
               * @param {number} g - green
               * @param {number} b - blue
               * @returns {number[]} hsv value
               */
              rgbToHSV: function(r, g, b) {
                var max, min, h, s, v, d;
                r /= 255;
                g /= 255;
                b /= 255;
                max = Math.max(r, g, b);
                min = Math.min(r, g, b);
                v = max;
                d = max - min;
                s = max === 0 ? 0 : d / max;
                if (max === min) {
                  h = 0;
                } else {
                  switch (max) {
                    case r:
                      h = (g - b) / d + (g < b ? 6 : 0);
                      break;
                    case g:
                      h = (b - r) / d + 2;
                      break;
                    case b:
                      h = (r - g) / d + 4;
                      break;
                  }
                  h /= 6;
                }
                return [Math.round(h * 360), Math.round(s * 100), Math.round(v * 100)];
              },
              /**
               * Convert HSV number to RGB
               * @param {number} h - hue
               * @param {number} s - saturation
               * @param {number} v - value
               * @returns {number[]} rgb value
               */
              hsvToRGB: function(h, s, v) {
                var r, g, b;
                var i;
                var f, p, q, t;
                h = Math.max(0, Math.min(360, h));
                s = Math.max(0, Math.min(100, s));
                v = Math.max(0, Math.min(100, v));
                s /= 100;
                v /= 100;
                if (s === 0) {
                  r = g = b = v;
                  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
                }
                h /= 60;
                i = Math.floor(h);
                f = h - i;
                p = v * (1 - s);
                q = v * (1 - s * f);
                t = v * (1 - s * (1 - f));
                switch (i) {
                  case 0:
                    r = v;
                    g = t;
                    b = p;
                    break;
                  case 1:
                    r = q;
                    g = v;
                    b = p;
                    break;
                  case 2:
                    r = p;
                    g = v;
                    b = t;
                    break;
                  case 3:
                    r = p;
                    g = q;
                    b = v;
                    break;
                  case 4:
                    r = t;
                    g = p;
                    b = v;
                    break;
                  default:
                    r = v;
                    g = p;
                    b = q;
                    break;
                }
                return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
              }
            };
            module2.exports = colorUtil;
          },
          /* 13 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function isFunction(obj) {
              return obj instanceof Function;
            }
            module2.exports = isFunction;
          },
          /* 14 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var isString = __webpack_require__(11);
            var forEach = __webpack_require__(2);
            var safeEvent = __webpack_require__(26);
            function on(element, types, handler, context) {
              if (isString(types)) {
                forEach(types.split(/\s+/g), function(type) {
                  bindEvent(element, type, handler, context);
                });
                return;
              }
              forEach(types, function(func, type) {
                bindEvent(element, type, func, handler);
              });
            }
            function bindEvent(element, type, handler, context) {
              function eventHandler(e) {
                handler.call(context || element, e || window.event);
              }
              if ("addEventListener" in element) {
                element.addEventListener(type, eventHandler);
              } else if ("attachEvent" in element) {
                element.attachEvent("on" + type, eventHandler);
              }
              memorizeHandler(element, type, handler, eventHandler);
            }
            function memorizeHandler(element, type, handler, wrappedHandler) {
              var events = safeEvent(element, type);
              var existInEvents = false;
              forEach(events, function(obj) {
                if (obj.handler === handler) {
                  existInEvents = true;
                  return false;
                }
                return true;
              });
              if (!existInEvents) {
                events.push({
                  handler,
                  wrappedHandler
                });
              }
            }
            module2.exports = on;
          },
          /* 15 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function preventDefault(e) {
              if (e.preventDefault) {
                e.preventDefault();
                return;
              }
              e.returnValue = false;
            }
            module2.exports = preventDefault;
          },
          /* 16 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function convertToKebabCase(key) {
              return key.replace(/([A-Z])/g, function(match) {
                return "-" + match.toLowerCase();
              });
            }
            module2.exports = convertToKebabCase;
          },
          /* 17 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var isString = __webpack_require__(11);
            var forEach = __webpack_require__(2);
            var safeEvent = __webpack_require__(26);
            function off(element, types, handler) {
              if (isString(types)) {
                forEach(types.split(/\s+/g), function(type) {
                  unbindEvent(element, type, handler);
                });
                return;
              }
              forEach(types, function(func, type) {
                unbindEvent(element, type, func);
              });
            }
            function unbindEvent(element, type, handler) {
              var events = safeEvent(element, type);
              var index;
              if (!handler) {
                forEach(events, function(item) {
                  removeHandler(element, type, item.wrappedHandler);
                });
                events.splice(0, events.length);
              } else {
                forEach(events, function(item, idx) {
                  if (handler === item.handler) {
                    removeHandler(element, type, item.wrappedHandler);
                    index = idx;
                    return false;
                  }
                  return true;
                });
                events.splice(index, 1);
              }
            }
            function removeHandler(element, type, handler) {
              if ("removeEventListener" in element) {
                element.removeEventListener(type, handler);
              } else if ("detachEvent" in element) {
                element.detachEvent("on" + type, handler);
              }
            }
            module2.exports = off;
          },
          /* 18 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var createObject = __webpack_require__(50);
            function inherit(subType, superType) {
              var prototype = createObject(superType.prototype);
              prototype.constructor = subType;
              subType.prototype = prototype;
            }
            module2.exports = inherit;
          },
          /* 19 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var forEachArray = __webpack_require__(6);
            var forEachOwnProperties = __webpack_require__(7);
            var extend = __webpack_require__(0);
            var isArray = __webpack_require__(1);
            var isExisty = __webpack_require__(20);
            var isFunction = __webpack_require__(13);
            var isObject = __webpack_require__(21);
            var util = __webpack_require__(4);
            var slice = Array.prototype.slice;
            function Collection(getItemIDFn) {
              this.items = {};
              this.length = 0;
              if (isFunction(getItemIDFn)) {
                this.getItemID = getItemIDFn;
              }
            }
            Collection.and = function(filters) {
              var cnt;
              filters = slice.call(arguments);
              cnt = filters.length;
              return function(item) {
                var i = 0;
                for (; i < cnt; i += 1) {
                  if (!filters[i].call(null, item)) {
                    return false;
                  }
                }
                return true;
              };
            };
            Collection.or = function(filters) {
              var cnt;
              filters = slice.call(arguments);
              cnt = filters.length;
              return function(item) {
                var i = 1;
                var result = filters[0].call(null, item);
                for (; i < cnt; i += 1) {
                  result = result || filters[i].call(null, item);
                }
                return result;
              };
            };
            Collection.merge = function(firstCollection) {
              var newItems = {};
              var merged = new Collection(firstCollection.getItemID);
              forEachArray(arguments, function(col) {
                extend(newItems, col.items);
              });
              merged.items = newItems;
              merged.length = util.getLength(merged.items);
              return merged;
            };
            Collection.prototype.getItemID = function(item) {
              return item._id + "";
            };
            Collection.prototype.add = function(item) {
              var id, ownItems;
              if (arguments.length > 1) {
                forEachArray(slice.call(arguments), function(o) {
                  this.add(o);
                }, this);
                return;
              }
              id = this.getItemID(item);
              ownItems = this.items;
              if (!ownItems[id]) {
                this.length += 1;
              }
              ownItems[id] = item;
            };
            Collection.prototype.remove = function(id) {
              var removed = [];
              var ownItems, itemToRemove;
              if (!this.length) {
                return removed;
              }
              if (arguments.length > 1) {
                removed = util.map(slice.call(arguments), function(id2) {
                  return this.remove(id2);
                }, this);
                return removed;
              }
              ownItems = this.items;
              if (isObject(id)) {
                id = this.getItemID(id);
              }
              if (!ownItems[id]) {
                return removed;
              }
              this.length -= 1;
              itemToRemove = ownItems[id];
              delete ownItems[id];
              return itemToRemove;
            };
            Collection.prototype.clear = function() {
              this.items = {};
              this.length = 0;
            };
            Collection.prototype.has = function(id) {
              var isFilter, has;
              if (!this.length) {
                return false;
              }
              isFilter = isFunction(id);
              has = false;
              if (isFilter) {
                this.each(function(item) {
                  if (id(item) === true) {
                    has = true;
                    return false;
                  }
                  return true;
                });
              } else {
                id = isObject(id) ? this.getItemID(id) : id;
                has = isExisty(this.items[id]);
              }
              return has;
            };
            Collection.prototype.doWhenHas = function(id, fn, context) {
              var item = this.items[id];
              if (!isExisty(item)) {
                return;
              }
              fn.call(context || this, item);
            };
            Collection.prototype.find = function(filter) {
              var result = new Collection();
              if (this.hasOwnProperty("getItemID")) {
                result.getItemID = this.getItemID;
              }
              this.each(function(item) {
                if (filter(item) === true) {
                  result.add(item);
                }
              });
              return result;
            };
            Collection.prototype.groupBy = function(key, groupFunc) {
              var result = {};
              var keyIsFunc = isFunction(key);
              var getItemIDFn = this.getItemID;
              var collection, baseValue;
              if (isArray(key)) {
                forEachArray(key, function(k) {
                  result[k + ""] = new Collection(getItemIDFn);
                });
                if (!groupFunc) {
                  return result;
                }
                key = groupFunc;
                keyIsFunc = true;
              }
              this.each(function(item) {
                if (keyIsFunc) {
                  baseValue = key(item);
                } else {
                  baseValue = item[key];
                  if (isFunction(baseValue)) {
                    baseValue = baseValue.apply(item);
                  }
                }
                collection = result[baseValue];
                if (!collection) {
                  collection = result[baseValue] = new Collection(getItemIDFn);
                }
                collection.add(item);
              });
              return result;
            };
            Collection.prototype.single = function() {
              var result;
              this.each(function(item) {
                result = item;
                return false;
              }, this);
              return result;
            };
            Collection.prototype.sort = function(compareFunction) {
              var arr = [];
              this.each(function(item) {
                arr.push(item);
              });
              if (isFunction(compareFunction)) {
                arr = arr.sort(compareFunction);
              }
              return arr;
            };
            Collection.prototype.each = function(iteratee, context) {
              forEachOwnProperties(this.items, iteratee, context || this);
            };
            Collection.prototype.toArray = function() {
              if (!this.length) {
                return [];
              }
              return util.map(this.items, function(item) {
                return item;
              });
            };
            module2.exports = Collection;
          },
          /* 20 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var isUndefined = __webpack_require__(3);
            var isNull = __webpack_require__(36);
            function isExisty(param) {
              return !isUndefined(param) && !isNull(param);
            }
            module2.exports = isExisty;
          },
          /* 21 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function isObject(obj) {
              return obj === Object(obj);
            }
            module2.exports = isObject;
          },
          /* 22 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var browser = {
              chrome: false,
              firefox: false,
              safari: false,
              msie: false,
              edge: false,
              others: false,
              version: 0
            };
            if (typeof window !== "undefined" && window.navigator) {
              detectBrowser();
            }
            function detectBrowser() {
              var nav = window.navigator;
              var appName = nav.appName.replace(/\s/g, "_");
              var userAgent = nav.userAgent;
              var rIE = /MSIE\s([0-9]+[.0-9]*)/;
              var rIE11 = /Trident.*rv:11\./;
              var rEdge = /Edge\/(\d+)\./;
              var versionRegex = {
                firefox: /Firefox\/(\d+)\./,
                chrome: /Chrome\/(\d+)\./,
                safari: /Version\/([\d.]+).*Safari\/(\d+)/
              };
              var key, tmp;
              var detector = {
                Microsoft_Internet_Explorer: function() {
                  var detectedVersion = userAgent.match(rIE);
                  if (detectedVersion) {
                    browser.msie = true;
                    browser.version = parseFloat(detectedVersion[1]);
                  } else {
                    browser.others = true;
                  }
                },
                Netscape: function() {
                  var detected = false;
                  if (rIE11.exec(userAgent)) {
                    browser.msie = true;
                    browser.version = 11;
                    detected = true;
                  } else if (rEdge.exec(userAgent)) {
                    browser.edge = true;
                    browser.version = userAgent.match(rEdge)[1];
                    detected = true;
                  } else {
                    for (key in versionRegex) {
                      if (versionRegex.hasOwnProperty(key)) {
                        tmp = userAgent.match(versionRegex[key]);
                        if (tmp && tmp.length > 1) {
                          browser[key] = detected = true;
                          browser.version = parseFloat(tmp[1] || 0);
                          break;
                        }
                      }
                    }
                  }
                  if (!detected) {
                    browser.others = true;
                  }
                }
              };
              var fn = detector[appName];
              if (fn) {
                detector[appName]();
              }
            }
            module2.exports = browser;
          },
          /* 23 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var isUndefined = __webpack_require__(3);
            function getClass(element) {
              if (!element || !element.className) {
                return "";
              }
              if (isUndefined(element.className.baseVal)) {
                return element.className;
              }
              return element.className.baseVal;
            }
            module2.exports = getClass;
          },
          /* 24 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            (function(global) {
              var CustomEvents = __webpack_require__(10);
              var disableTextSelection = __webpack_require__(42);
              var enableTextSelection = __webpack_require__(44);
              var getMouseButton = __webpack_require__(47);
              var getTarget = __webpack_require__(28);
              var off = __webpack_require__(17);
              var on = __webpack_require__(14);
              var preventDefault = __webpack_require__(15);
              var extend = __webpack_require__(0);
              function Drag(options, container) {
                on(container, "mousedown", this._onMouseDown, this);
                this.options = extend({
                  distance: 10
                }, options);
                this.container = container;
                this._isMoved = false;
                this._distance = 0;
                this._dragStartFired = false;
                this._dragStartEventData = null;
              }
              Drag.prototype.destroy = function() {
                off(this.container, "mousedown", this._onMouseDown);
                this.options = this.container = this._isMoved = this._distance = this._dragStartFired = this._dragStartEventData = null;
              };
              Drag.prototype._toggleDragEvent = function(toBind) {
                var container = this.container;
                if (toBind) {
                  disableTextSelection(container);
                  on(window, "dragstart", preventDefault);
                  on(global.document, {
                    mousemove: this._onMouseMove,
                    mouseup: this._onMouseUp
                  }, this);
                } else {
                  enableTextSelection(container);
                  off(window, "dragstart", preventDefault);
                  off(global.document, {
                    mousemove: this._onMouseMove,
                    mouseup: this._onMouseUp
                  });
                }
              };
              Drag.prototype._getEventData = function(mouseEvent) {
                return {
                  target: getTarget(mouseEvent),
                  originEvent: mouseEvent
                };
              };
              Drag.prototype._onMouseDown = function(mouseDownEvent) {
                if (getMouseButton(mouseDownEvent) !== 0) {
                  return;
                }
                this._distance = 0;
                this._dragStartFired = false;
                this._dragStartEventData = this._getEventData(mouseDownEvent);
                this._toggleDragEvent(true);
              };
              Drag.prototype._onMouseMove = function(mouseMoveEvent) {
                var distance = this.options.distance;
                preventDefault(mouseMoveEvent);
                this._isMoved = true;
                if (this._distance < distance) {
                  this._distance += 1;
                  return;
                }
                if (!this._dragStartFired) {
                  this._dragStartFired = true;
                  if (!this.invoke("dragStart", this._dragStartEventData)) {
                    this._toggleDragEvent(false);
                    return;
                  }
                }
                this.fire("drag", this._getEventData(mouseMoveEvent));
              };
              Drag.prototype._onMouseUp = function(mouseUpEvent) {
                this._toggleDragEvent(false);
                if (this._isMoved) {
                  this._isMoved = false;
                  this.fire("dragEnd", this._getEventData(mouseUpEvent));
                  return;
                }
                this.fire("click", this._getEventData(mouseUpEvent));
              };
              CustomEvents.mixin(Drag);
              module2.exports = Drag;
            }).call(this, __webpack_require__(25));
          },
          /* 25 */
          /***/
          function(module2, exports2) {
            var g;
            g = function() {
              return this;
            }();
            try {
              g = g || new Function("return this")();
            } catch (e) {
              if (typeof window === "object")
                g = window;
            }
            module2.exports = g;
          },
          /* 26 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var EVENT_KEY = "_feEventKey";
            function safeEvent(element, type) {
              var events = element[EVENT_KEY];
              var handlers;
              if (!events) {
                events = element[EVENT_KEY] = {};
              }
              handlers = events[type];
              if (!handlers) {
                handlers = events[type] = [];
              }
              return handlers;
            }
            module2.exports = safeEvent;
          },
          /* 27 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function testCSSProp(props) {
              var style = document.documentElement.style;
              var i, len;
              for (i = 0, len = props.length; i < len; i += 1) {
                if (props[i] in style) {
                  return props[i];
                }
              }
              return false;
            }
            module2.exports = testCSSProp;
          },
          /* 28 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function getTarget(e) {
              return e.target || e.srcElement;
            }
            module2.exports = getTarget;
          },
          /* 29 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var CustomEvents = __webpack_require__(10);
            var getTarget = __webpack_require__(28);
            var off = __webpack_require__(17);
            var on = __webpack_require__(14);
            var hasClass = __webpack_require__(30);
            var extend = __webpack_require__(0);
            var inherit = __webpack_require__(18);
            var domUtil = __webpack_require__(9);
            var colorUtil = __webpack_require__(12);
            var View = __webpack_require__(8);
            var tmpl = __webpack_require__(51);
            function Palette(options, container) {
              this.options = extend({
                cssPrefix: "tui-colorpicker-",
                preset: ["#181818", "#282828", "#383838", "#585858", "#B8B8B8", "#D8D8D8", "#E8E8E8", "#F8F8F8", "#AB4642", "#DC9656", "#F7CA88", "#A1B56C", "#86C1B9", "#7CAFC2", "#BA8BAF", "#A16946"],
                detailTxt: "Detail"
              }, options);
              container = domUtil.appendHTMLElement("div", container, this.options.cssPrefix + "palette-container");
              View.call(this, options, container);
            }
            inherit(Palette, View);
            Palette.prototype._onClick = function(clickEvent) {
              var options = this.options;
              var target = getTarget(clickEvent);
              var eventData = {};
              if (hasClass(target, options.cssPrefix + "palette-button")) {
                eventData.color = target.value;
                this.fire("_selectColor", eventData);
                return;
              }
              if (hasClass(target, options.cssPrefix + "palette-toggle-slider")) {
                this.fire("_toggleSlider");
              }
            };
            Palette.prototype._onChange = function(changeEvent) {
              var options = this.options;
              var target = getTarget(changeEvent);
              var eventData = {};
              if (hasClass(target, options.cssPrefix + "palette-hex")) {
                eventData.color = target.value;
                this.fire("_selectColor", eventData);
              }
            };
            Palette.prototype._beforeDestroy = function() {
              this._toggleEvent(false);
            };
            Palette.prototype._toggleEvent = function(toBind) {
              var options = this.options;
              var container = this.container;
              var handleEvent = toBind ? on : off;
              var hexTextBox;
              handleEvent(container, "click", this._onClick, this);
              hexTextBox = container.querySelector("." + options.cssPrefix + "palette-hex", container);
              if (hexTextBox) {
                handleEvent(hexTextBox, "change", this._onChange, this);
              }
            };
            Palette.prototype.render = function(color) {
              var options = this.options;
              var html = "";
              this._toggleEvent(false);
              html = tmpl({
                cssPrefix: options.cssPrefix,
                preset: options.preset,
                detailTxt: options.detailTxt,
                color,
                isValidRGB: colorUtil.isValidRGB,
                getItemClass: function(itemColor) {
                  return !itemColor ? " " + options.cssPrefix + "color-transparent" : "";
                },
                isSelected: function(itemColor) {
                  return itemColor === color ? " " + options.cssPrefix + "selected" : "";
                }
              });
              this.container.innerHTML = html;
              this._toggleEvent(true);
            };
            CustomEvents.mixin(Palette);
            module2.exports = Palette;
          },
          /* 30 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var inArray = __webpack_require__(5);
            var getClass = __webpack_require__(23);
            function hasClass(element, cssClass) {
              var origin;
              if (element.classList) {
                return element.classList.contains(cssClass);
              }
              origin = getClass(element).split(/\s+/);
              return inArray(cssClass, origin) > -1;
            }
            module2.exports = hasClass;
          },
          /* 31 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var CustomEvents = __webpack_require__(10);
            var getMousePosition = __webpack_require__(53);
            var closest = __webpack_require__(54);
            var hasClass = __webpack_require__(30);
            var extend = __webpack_require__(0);
            var inherit = __webpack_require__(18);
            var domUtil = __webpack_require__(9);
            var svgvml = __webpack_require__(32);
            var colorUtil = __webpack_require__(12);
            var View = __webpack_require__(8);
            var Drag = __webpack_require__(24);
            var tmpl = __webpack_require__(57);
            var DEFAULT_COLORSLIDER_POS_LIMIT_MIN = -7;
            var DEFAULT_COLORSLIDER_POS_LIMIT_MAX = 112;
            var DEFAULT_HUEBAR_POS_LIMIT_MIN = -3;
            var DEFAULT_HUEBAR_POS_LIMIT_MAX = 115;
            var HUE_WHEEL_MAX = 359.99;
            function Slider(options, container) {
              container = domUtil.appendHTMLElement("div", container, options.cssPrefix + "slider-container");
              container.style.display = "none";
              View.call(this, options, container);
              this.options = extend({
                color: "#f8f8f8",
                cssPrefix: "tui-colorpicker-"
              }, options);
              this._dragDataCache = {};
              this.sliderHandleElement = null;
              this.huebarHandleElement = null;
              this.baseColorElement = null;
              this.drag = new Drag({
                distance: 0
              }, container);
              this.colorSliderPosLimitRange = [DEFAULT_COLORSLIDER_POS_LIMIT_MIN, DEFAULT_COLORSLIDER_POS_LIMIT_MAX];
              this.huebarPosLimitRange = [DEFAULT_HUEBAR_POS_LIMIT_MIN, DEFAULT_HUEBAR_POS_LIMIT_MAX];
              this.drag.on({
                dragStart: this._onDragStart,
                drag: this._onDrag,
                dragEnd: this._onDragEnd,
                click: this._onClick
              }, this);
            }
            inherit(Slider, View);
            Slider.prototype._beforeDestroy = function() {
              this.drag.off();
              this.drag = this.options = this._dragDataCache = this.sliderHandleElement = this.huebarHandleElement = this.baseColorElement = null;
            };
            Slider.prototype.toggle = function(onOff) {
              this.container.style.display = !!onOff ? "block" : "none";
            };
            Slider.prototype.isVisible = function() {
              return this.container.style.display === "block";
            };
            Slider.prototype.render = function(colorStr) {
              var container = this.container;
              var options = this.options;
              var html = tmpl.layout;
              var rgb, hsv;
              if (!colorUtil.isValidRGB(colorStr)) {
                return;
              }
              html = html.replace(/{{slider}}/, tmpl.slider);
              html = html.replace(/{{huebar}}/, tmpl.huebar);
              html = html.replace(/{{cssPrefix}}/g, options.cssPrefix);
              html = html.replace(/{{id}}/g, options.id);
              this.container.innerHTML = html;
              this.sliderSvgElement = container.querySelector("." + options.cssPrefix + "svg-slider");
              this.huebarSvgElement = container.querySelector("." + options.cssPrefix + "svg-huebar");
              this.sliderHandleElement = container.querySelector("." + options.cssPrefix + "slider-handle");
              this.huebarHandleElement = container.querySelector("." + options.cssPrefix + "huebar-handle");
              this.baseColorElement = container.querySelector("." + options.cssPrefix + "slider-basecolor");
              rgb = colorUtil.hexToRGB(colorStr);
              hsv = colorUtil.rgbToHSV.apply(null, rgb);
              this.moveHue(hsv[0], true);
              this.moveSaturationAndValue(hsv[1], hsv[2], true);
            };
            Slider.prototype._setColorSliderPosMax = function() {
              var sliderRects = this.sliderSvgElement.getClientRects()[0];
              if (sliderRects) {
                this.colorSliderPosLimitRange[1] = sliderRects.height - 10;
              }
            };
            Slider.prototype._moveColorSliderHandle = function(newLeft, newTop, silent) {
              var handle = this.sliderHandleElement;
              var handleColor;
              newTop = Math.max(this.colorSliderPosLimitRange[0], newTop);
              newTop = Math.min(this.colorSliderPosLimitRange[1], newTop);
              newLeft = Math.max(this.colorSliderPosLimitRange[0], newLeft);
              newLeft = Math.min(this.colorSliderPosLimitRange[1], newLeft);
              svgvml.setTranslateXY(handle, newLeft, newTop);
              handleColor = newTop > 50 ? "white" : "black";
              svgvml.setStrokeColor(handle, handleColor);
              if (!silent) {
                this.fire("_selectColor", {
                  color: colorUtil.rgbToHEX.apply(null, this.getRGB())
                });
              }
            };
            Slider.prototype.moveSaturationAndValue = function(saturation, value, silent) {
              var absMin, maxValue, newLeft, newTop;
              saturation = saturation || 0;
              value = value || 0;
              absMin = Math.abs(this.colorSliderPosLimitRange[0]);
              maxValue = this.colorSliderPosLimitRange[1];
              newLeft = saturation * maxValue / 100 - absMin;
              newTop = maxValue - value * maxValue / 100 - absMin;
              this._moveColorSliderHandle(newLeft, newTop, silent);
            };
            Slider.prototype._moveColorSliderByPosition = function(x, y) {
              var offset = this.colorSliderPosLimitRange[0];
              this._moveColorSliderHandle(x + offset, y + offset);
            };
            Slider.prototype.getSaturationAndValue = function() {
              var absMin = Math.abs(this.colorSliderPosLimitRange[0]);
              var maxValue = absMin + this.colorSliderPosLimitRange[1];
              var position = svgvml.getTranslateXY(this.sliderHandleElement);
              var saturation, value;
              saturation = (position[1] + absMin) / maxValue * 100;
              value = 100 - (position[0] + absMin) / maxValue * 100;
              return [saturation, value];
            };
            Slider.prototype._setHueBarPosMax = function() {
              var huebarRects = this.huebarSvgElement.getClientRects()[0];
              if (huebarRects) {
                this.huebarPosLimitRange[1] = huebarRects.height - 7;
              }
            };
            Slider.prototype._moveHueHandle = function(newTop, silent) {
              var hueHandleElement = this.huebarHandleElement;
              var baseColorElement = this.baseColorElement;
              var newGradientColor, hexStr;
              newTop = Math.max(this.huebarPosLimitRange[0], newTop);
              newTop = Math.min(this.huebarPosLimitRange[1], newTop);
              svgvml.setTranslateY(hueHandleElement, newTop);
              newGradientColor = colorUtil.hsvToRGB(this.getHue(), 100, 100);
              hexStr = colorUtil.rgbToHEX.apply(null, newGradientColor);
              svgvml.setGradientColorStop(baseColorElement, hexStr);
              if (!silent) {
                this.fire("_selectColor", {
                  color: colorUtil.rgbToHEX.apply(null, this.getRGB())
                });
              }
            };
            Slider.prototype.moveHue = function(degree, silent) {
              var newTop = 0;
              var absMin, maxValue;
              absMin = Math.abs(this.huebarPosLimitRange[0]);
              maxValue = absMin + this.huebarPosLimitRange[1];
              degree = degree || 0;
              newTop = maxValue * degree / HUE_WHEEL_MAX - absMin;
              this._moveHueHandle(newTop, silent);
            };
            Slider.prototype._moveHueByPosition = function(y) {
              var offset = this.huebarPosLimitRange[0];
              this._moveHueHandle(y + offset);
            };
            Slider.prototype.getHue = function() {
              var handle = this.huebarHandleElement;
              var position = svgvml.getTranslateXY(handle);
              var absMin, maxValue;
              absMin = Math.abs(this.huebarPosLimitRange[0]);
              maxValue = absMin + this.huebarPosLimitRange[1];
              return (position[0] + absMin) * HUE_WHEEL_MAX / maxValue;
            };
            Slider.prototype.getHSV = function() {
              var sv = this.getSaturationAndValue();
              var h = this.getHue();
              return [h].concat(sv);
            };
            Slider.prototype.getRGB = function() {
              return colorUtil.hsvToRGB.apply(null, this.getHSV());
            };
            Slider.prototype._prepareColorSliderForMouseEvent = function(event) {
              var options = this.options;
              var sliderPart = closest(event.target, "." + options.cssPrefix + "slider-part");
              var cache;
              cache = this._dragDataCache = {
                isColorSlider: hasClass(sliderPart, options.cssPrefix + "slider-left"),
                parentElement: sliderPart
              };
              return cache;
            };
            Slider.prototype._onClick = function(clickEvent) {
              var cache = this._prepareColorSliderForMouseEvent(clickEvent);
              var mousePos = getMousePosition(clickEvent.originEvent, cache.parentElement);
              if (cache.isColorSlider) {
                this._moveColorSliderByPosition(mousePos[0], mousePos[1]);
              } else {
                this._moveHueByPosition(mousePos[1]);
              }
              this._dragDataCache = null;
            };
            Slider.prototype._onDragStart = function(dragStartEvent) {
              this._setColorSliderPosMax();
              this._setHueBarPosMax();
              this._prepareColorSliderForMouseEvent(dragStartEvent);
            };
            Slider.prototype._onDrag = function(dragEvent) {
              var cache = this._dragDataCache;
              var mousePos = getMousePosition(dragEvent.originEvent, cache.parentElement);
              if (cache.isColorSlider) {
                this._moveColorSliderByPosition(mousePos[0], mousePos[1]);
              } else {
                this._moveHueByPosition(mousePos[1]);
              }
            };
            Slider.prototype._onDragEnd = function() {
              this._dragDataCache = null;
            };
            CustomEvents.mixin(Slider);
            module2.exports = Slider;
          },
          /* 32 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var isOldBrowser = __webpack_require__(4).isOldBrowser;
            var PARSE_TRANSLATE_NUM_REGEX = /[\.\-0-9]+/g;
            var SVG_HUE_HANDLE_RIGHT_POS = -6;
            var svgvml = {
              /**
               * Get translate transform value
               * @param {SVG|VML} obj - svg or vml object that want to know translate x, y
               * @returns {number[]} translated coordinates [x, y]
               */
              getTranslateXY: function(obj) {
                var temp;
                if (isOldBrowser) {
                  temp = obj.style;
                  return [parseFloat(temp.top), parseFloat(temp.left)];
                }
                temp = obj.getAttribute("transform");
                if (!temp) {
                  return [0, 0];
                }
                temp = temp.match(PARSE_TRANSLATE_NUM_REGEX);
                return [parseFloat(temp[1]), parseFloat(temp[0])];
              },
              /**
               * Set translate transform value
               * @param {SVG|VML} obj - SVG or VML object to setting translate transform.
               * @param {number} x - translate X value
               * @param {number} y - translate Y value
               */
              setTranslateXY: function(obj, x, y) {
                if (isOldBrowser) {
                  obj.style.left = x + "px";
                  obj.style.top = y + "px";
                } else {
                  obj.setAttribute("transform", "translate(" + x + "," + y + ")");
                }
              },
              /**
               * Set translate only Y value
               * @param {SVG|VML} obj - SVG or VML object to setting translate transform.
               * @param {number} y - translate Y value
               */
              setTranslateY: function(obj, y) {
                if (isOldBrowser) {
                  obj.style.top = y + "px";
                } else {
                  obj.setAttribute("transform", "translate(" + SVG_HUE_HANDLE_RIGHT_POS + "," + y + ")");
                }
              },
              /**
               * Set stroke color to SVG or VML object
               * @param {SVG|VML} obj - SVG or VML object to setting stroke color
               * @param {string} colorStr - color string
               */
              setStrokeColor: function(obj, colorStr) {
                if (isOldBrowser) {
                  obj.strokecolor = colorStr;
                } else {
                  obj.setAttribute("stroke", colorStr);
                }
              },
              /**
               * Set gradient stop color to SVG, VML object.
               * @param {SVG|VML} obj - SVG, VML object to applying gradient stop color
               * @param {string} colorStr - color string
               */
              setGradientColorStop: function(obj, colorStr) {
                if (isOldBrowser) {
                  obj.color = colorStr;
                } else {
                  obj.setAttribute("stop-color", colorStr);
                }
              }
            };
            module2.exports = svgvml;
          },
          /* 33 */
          /***/
          function(module2, exports2, __webpack_require__) {
            __webpack_require__(34);
            module2.exports = __webpack_require__(35);
          },
          /* 34 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 35 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var Collection = __webpack_require__(19);
            var View = __webpack_require__(8);
            var Drag = __webpack_require__(24);
            var create = __webpack_require__(48);
            var Palette = __webpack_require__(29);
            var Slider = __webpack_require__(31);
            var colorUtil = __webpack_require__(12);
            var svgvml = __webpack_require__(32);
            var colorPicker = {
              Collection,
              View,
              Drag,
              create,
              Palette,
              Slider,
              colorutil: colorUtil,
              svgvml
            };
            module2.exports = colorPicker;
          },
          /* 36 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function isNull(obj) {
              return obj === null;
            }
            module2.exports = isNull;
          },
          /* 37 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var isUndefined = __webpack_require__(3);
            var imagePing = __webpack_require__(38);
            var ms7days = 7 * 24 * 60 * 60 * 1e3;
            function isExpired(date) {
              var now = (/* @__PURE__ */ new Date()).getTime();
              return now - date > ms7days;
            }
            function sendHostname(appName, trackingId) {
              var url = "https://www.google-analytics.com/collect";
              var hostname = location.hostname;
              var hitType = "event";
              var eventCategory = "use";
              var applicationKeyForStorage = "TOAST UI " + appName + " for " + hostname + ": Statistics";
              var date = window.localStorage.getItem(applicationKeyForStorage);
              if (!isUndefined(window.tui) && window.tui.usageStatistics === false) {
                return;
              }
              if (date && !isExpired(date)) {
                return;
              }
              window.localStorage.setItem(applicationKeyForStorage, (/* @__PURE__ */ new Date()).getTime());
              setTimeout(function() {
                if (document.readyState === "interactive" || document.readyState === "complete") {
                  imagePing(url, {
                    v: 1,
                    t: hitType,
                    tid: trackingId,
                    cid: hostname,
                    dp: hostname,
                    dh: appName,
                    el: appName,
                    ec: eventCategory
                  });
                }
              }, 1e3);
            }
            module2.exports = sendHostname;
          },
          /* 38 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var forEachOwnProperties = __webpack_require__(7);
            function imagePing(url, trackingInfo) {
              var trackingElement = document.createElement("img");
              var queryString = "";
              forEachOwnProperties(trackingInfo, function(value, key) {
                queryString += "&" + key + "=" + value;
              });
              queryString = queryString.substring(1);
              trackingElement.src = url + "?" + queryString;
              trackingElement.style.display = "none";
              document.body.appendChild(trackingElement);
              document.body.removeChild(trackingElement);
              return trackingElement;
            }
            module2.exports = imagePing;
          },
          /* 39 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var forEach = __webpack_require__(2);
            var inArray = __webpack_require__(5);
            var getClass = __webpack_require__(23);
            var setClassName = __webpack_require__(40);
            function addClass(element) {
              var cssClass = Array.prototype.slice.call(arguments, 1);
              var classList = element.classList;
              var newClass = [];
              var origin;
              if (classList) {
                forEach(cssClass, function(name) {
                  element.classList.add(name);
                });
                return;
              }
              origin = getClass(element);
              if (origin) {
                cssClass = [].concat(origin.split(/\s+/), cssClass);
              }
              forEach(cssClass, function(cls) {
                if (inArray(cls, newClass) < 0) {
                  newClass.push(cls);
                }
              });
              setClassName(element, newClass);
            }
            module2.exports = addClass;
          },
          /* 40 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var isArray = __webpack_require__(1);
            var isUndefined = __webpack_require__(3);
            function setClassName(element, cssClass) {
              cssClass = isArray(cssClass) ? cssClass.join(" ") : cssClass;
              cssClass = cssClass.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
              if (isUndefined(element.className.baseVal)) {
                element.className = cssClass;
                return;
              }
              element.className.baseVal = cssClass;
            }
            module2.exports = setClassName;
          },
          /* 41 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function isNumber(obj) {
              return typeof obj === "number" || obj instanceof Number;
            }
            module2.exports = isNumber;
          },
          /* 42 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var on = __webpack_require__(14);
            var preventDefault = __webpack_require__(15);
            var setData = __webpack_require__(43);
            var testCSSProp = __webpack_require__(27);
            var SUPPORT_SELECTSTART = "onselectstart" in document;
            var KEY_PREVIOUS_USER_SELECT = "prevUserSelect";
            var userSelectProperty = testCSSProp([
              "userSelect",
              "WebkitUserSelect",
              "OUserSelect",
              "MozUserSelect",
              "msUserSelect"
            ]);
            function disableTextSelection(el) {
              if (!el) {
                el = document;
              }
              if (SUPPORT_SELECTSTART) {
                on(el, "selectstart", preventDefault);
              } else {
                el = el === document ? document.documentElement : el;
                setData(el, KEY_PREVIOUS_USER_SELECT, el.style[userSelectProperty]);
                el.style[userSelectProperty] = "none";
              }
            }
            module2.exports = disableTextSelection;
          },
          /* 43 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var convertToKebabCase = __webpack_require__(16);
            function setData(element, key, value) {
              if (element.dataset) {
                element.dataset[key] = value;
                return;
              }
              element.setAttribute("data-" + convertToKebabCase(key), value);
            }
            module2.exports = setData;
          },
          /* 44 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var off = __webpack_require__(17);
            var preventDefault = __webpack_require__(15);
            var getData = __webpack_require__(45);
            var removeData = __webpack_require__(46);
            var testCSSProp = __webpack_require__(27);
            var SUPPORT_SELECTSTART = "onselectstart" in document;
            var KEY_PREVIOUS_USER_SELECT = "prevUserSelect";
            var userSelectProperty = testCSSProp([
              "userSelect",
              "WebkitUserSelect",
              "OUserSelect",
              "MozUserSelect",
              "msUserSelect"
            ]);
            function enableTextSelection(el) {
              if (!el) {
                el = document;
              }
              if (SUPPORT_SELECTSTART) {
                off(el, "selectstart", preventDefault);
              } else {
                el = el === document ? document.documentElement : el;
                el.style[userSelectProperty] = getData(el, KEY_PREVIOUS_USER_SELECT) || "auto";
                removeData(el, KEY_PREVIOUS_USER_SELECT);
              }
            }
            module2.exports = enableTextSelection;
          },
          /* 45 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var convertToKebabCase = __webpack_require__(16);
            function getData(element, key) {
              if (element.dataset) {
                return element.dataset[key];
              }
              return element.getAttribute("data-" + convertToKebabCase(key));
            }
            module2.exports = getData;
          },
          /* 46 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var convertToKebabCase = __webpack_require__(16);
            function removeData(element, key) {
              if (element.dataset) {
                delete element.dataset[key];
                return;
              }
              element.removeAttribute("data-" + convertToKebabCase(key));
            }
            module2.exports = removeData;
          },
          /* 47 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var browser = __webpack_require__(22);
            var inArray = __webpack_require__(5);
            var primaryButton = ["0", "1", "3", "5", "7"];
            var secondaryButton = ["2", "6"];
            var wheelButton = ["4"];
            function getMouseButton(mouseEvent) {
              if (browser.msie && browser.version <= 8) {
                return getMouseButtonIE8AndEarlier(mouseEvent);
              }
              return mouseEvent.button;
            }
            function getMouseButtonIE8AndEarlier(mouseEvent) {
              var button = String(mouseEvent.button);
              if (inArray(button, primaryButton) > -1) {
                return 0;
              }
              if (inArray(button, secondaryButton) > -1) {
                return 2;
              }
              if (inArray(button, wheelButton) > -1) {
                return 1;
              }
              return null;
            }
            module2.exports = getMouseButton;
          },
          /* 48 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var CustomEvents = __webpack_require__(10);
            var extend = __webpack_require__(0);
            var util = __webpack_require__(4);
            var colorUtil = __webpack_require__(12);
            var Layout = __webpack_require__(49);
            var Palette = __webpack_require__(29);
            var Slider = __webpack_require__(31);
            var currentId = 0;
            function generateId() {
              currentId += 1;
              return currentId;
            }
            function ColorPicker(options) {
              var layout;
              if (!(this instanceof ColorPicker)) {
                return new ColorPicker(options);
              }
              options = this.options = extend({
                container: null,
                color: "#f8f8f8",
                preset: ["#181818", "#282828", "#383838", "#585858", "#b8b8b8", "#d8d8d8", "#e8e8e8", "#f8f8f8", "#ab4642", "#dc9656", "#f7ca88", "#a1b56c", "#86c1b9", "#7cafc2", "#ba8baf", "#a16946"],
                cssPrefix: "tui-colorpicker-",
                detailTxt: "Detail",
                id: generateId(),
                usageStatistics: true
              }, options);
              if (!options.container) {
                throw new Error("ColorPicker(): need container option.");
              }
              layout = this.layout = new Layout(options, options.container);
              this.palette = new Palette(options, layout.container);
              this.palette.on({
                _selectColor: this._onSelectColorInPalette,
                _toggleSlider: this._onToggleSlider
              }, this);
              this.slider = new Slider(options, layout.container);
              this.slider.on("_selectColor", this._onSelectColorInSlider, this);
              layout.addChild(this.palette);
              layout.addChild(this.slider);
              this.render(options.color);
              if (options.usageStatistics) {
                util.sendHostName();
              }
            }
            ColorPicker.prototype._onSelectColorInPalette = function(selectColorEventData) {
              var color = selectColorEventData.color;
              var opt = this.options;
              if (!colorUtil.isValidRGB(color) && color !== "") {
                this.render();
                return;
              }
              this.fire("selectColor", {
                color,
                origin: "palette"
              });
              if (opt.color === color) {
                return;
              }
              opt.color = color;
              this.render(color);
            };
            ColorPicker.prototype._onToggleSlider = function() {
              this.slider.toggle(!this.slider.isVisible());
            };
            ColorPicker.prototype._onSelectColorInSlider = function(selectColorEventData) {
              var color = selectColorEventData.color;
              var opt = this.options;
              this.fire("selectColor", {
                color,
                origin: "slider"
              });
              if (opt.color === color) {
                return;
              }
              opt.color = color;
              this.palette.render(color);
            };
            ColorPicker.prototype.setColor = function(hexStr) {
              if (!colorUtil.isValidRGB(hexStr)) {
                throw new Error("ColorPicker#setColor(): need valid hex string color value");
              }
              this.options.color = hexStr;
              this.render(hexStr);
            };
            ColorPicker.prototype.getColor = function() {
              return this.options.color;
            };
            ColorPicker.prototype.toggle = function(isShow) {
              this.layout.container.style.display = !!isShow ? "block" : "none";
            };
            ColorPicker.prototype.render = function(color) {
              this.layout.render(color || this.options.color);
            };
            ColorPicker.prototype.destroy = function() {
              this.layout.destroy();
              this.options.container.innerHTML = "";
              this.layout = this.slider = this.palette = this.options = null;
            };
            CustomEvents.mixin(ColorPicker);
            module2.exports = ColorPicker;
          },
          /* 49 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var extend = __webpack_require__(0);
            var inherit = __webpack_require__(18);
            var domUtil = __webpack_require__(9);
            var View = __webpack_require__(8);
            function Layout(options, container) {
              this.options = extend({
                cssPrefix: "tui-colorpicker-"
              }, options);
              container = domUtil.appendHTMLElement("div", container, this.options.cssPrefix + "container");
              View.call(this, options, container);
              this.render();
            }
            inherit(Layout, View);
            Layout.prototype.render = function(color) {
              this.recursive(function(view) {
                view.render(color);
              }, true);
            };
            module2.exports = Layout;
          },
          /* 50 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            function createObject(obj) {
              function F() {
              }
              F.prototype = obj;
              return new F();
            }
            module2.exports = createObject;
          },
          /* 51 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var template = __webpack_require__(52);
            module2.exports = function(context) {
              var item = ['<li><input class="{{cssPrefix}}palette-button{{isSelected @this}}{{getItemClass @this}}" type="button"', "{{if isValidRGB @this}}", ' style="background-color:{{@this}};color:{{@this}}"', "{{/if}}", ' title="{{@this}}" value="{{@this}}" /></li>'].join("");
              var layout = ['<ul class="{{cssPrefix}}clearfix">', "{{each preset}}", item, "{{/each}}", "</ul>", '<div class="{{cssPrefix}}clearfix" style="overflow:hidden">', '<input type="button" class="{{cssPrefix}}palette-toggle-slider" value="{{detailTxt}}" />', '<input type="text" class="{{cssPrefix}}palette-hex" value="{{color}}" maxlength="7" />', '<span class="{{cssPrefix}}palette-preview" style="background-color:{{color}};color:{{color}}">{{color}}</span>', "</div>"].join("\n");
              return template(layout, context);
            };
          },
          /* 52 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var inArray = __webpack_require__(5);
            var forEach = __webpack_require__(2);
            var isArray = __webpack_require__(1);
            var isString = __webpack_require__(11);
            var extend = __webpack_require__(0);
            var EXPRESSION_REGEXP = /{{\s?|\s?}}/g;
            var BRACKET_NOTATION_REGEXP = /^[a-zA-Z0-9_@]+\[[a-zA-Z0-9_@"']+\]$/;
            var BRACKET_REGEXP = /\[\s?|\s?\]/;
            var DOT_NOTATION_REGEXP = /^[a-zA-Z_]+\.[a-zA-Z_]+$/;
            var DOT_REGEXP = /\./;
            var STRING_NOTATION_REGEXP = /^["']\w+["']$/;
            var STRING_REGEXP = /"|'/g;
            var NUMBER_REGEXP = /^-?\d+\.?\d*$/;
            var EXPRESSION_INTERVAL = 2;
            var BLOCK_HELPERS = {
              "if": handleIf,
              "each": handleEach,
              "with": handleWith
            };
            var isValidSplit = "a".split(/a/).length === 3;
            var splitByRegExp = function() {
              if (isValidSplit) {
                return function(text, regexp) {
                  return text.split(regexp);
                };
              }
              return function(text, regexp) {
                var result = [];
                var prevIndex = 0;
                var match, index;
                if (!regexp.global) {
                  regexp = new RegExp(regexp, "g");
                }
                match = regexp.exec(text);
                while (match !== null) {
                  index = match.index;
                  result.push(text.slice(prevIndex, index));
                  prevIndex = index + match[0].length;
                  match = regexp.exec(text);
                }
                result.push(text.slice(prevIndex));
                return result;
              };
            }();
            function getValueFromContext(exp, context) {
              var splitedExps;
              var value = context[exp];
              if (exp === "true") {
                value = true;
              } else if (exp === "false") {
                value = false;
              } else if (STRING_NOTATION_REGEXP.test(exp)) {
                value = exp.replace(STRING_REGEXP, "");
              } else if (BRACKET_NOTATION_REGEXP.test(exp)) {
                splitedExps = exp.split(BRACKET_REGEXP);
                value = getValueFromContext(splitedExps[0], context)[getValueFromContext(splitedExps[1], context)];
              } else if (DOT_NOTATION_REGEXP.test(exp)) {
                splitedExps = exp.split(DOT_REGEXP);
                value = getValueFromContext(splitedExps[0], context)[splitedExps[1]];
              } else if (NUMBER_REGEXP.test(exp)) {
                value = parseFloat(exp);
              }
              return value;
            }
            function extractElseif(ifExps, sourcesInsideBlock) {
              var exps = [ifExps];
              var sourcesInsideIf = [];
              var otherIfCount = 0;
              var start = 0;
              forEach(sourcesInsideBlock, function(source, index) {
                if (source.indexOf("if") === 0) {
                  otherIfCount += 1;
                } else if (source === "/if") {
                  otherIfCount -= 1;
                } else if (!otherIfCount && (source.indexOf("elseif") === 0 || source === "else")) {
                  exps.push(source === "else" ? ["true"] : source.split(" ").slice(1));
                  sourcesInsideIf.push(sourcesInsideBlock.slice(start, index));
                  start = index + 1;
                }
              });
              sourcesInsideIf.push(sourcesInsideBlock.slice(start));
              return {
                exps,
                sourcesInsideIf
              };
            }
            function handleIf(exps, sourcesInsideBlock, context) {
              var analyzed = extractElseif(exps, sourcesInsideBlock);
              var result = false;
              var compiledSource = "";
              forEach(analyzed.exps, function(exp, index) {
                result = handleExpression(exp, context);
                if (result) {
                  compiledSource = compile(analyzed.sourcesInsideIf[index], context);
                }
                return !result;
              });
              return compiledSource;
            }
            function handleEach(exps, sourcesInsideBlock, context) {
              var collection = handleExpression(exps, context);
              var additionalKey = isArray(collection) ? "@index" : "@key";
              var additionalContext = {};
              var result = "";
              forEach(collection, function(item, key) {
                additionalContext[additionalKey] = key;
                additionalContext["@this"] = item;
                extend(context, additionalContext);
                result += compile(sourcesInsideBlock.slice(), context);
              });
              return result;
            }
            function handleWith(exps, sourcesInsideBlock, context) {
              var asIndex = inArray("as", exps);
              var alias = exps[asIndex + 1];
              var result = handleExpression(exps.slice(0, asIndex), context);
              var additionalContext = {};
              additionalContext[alias] = result;
              return compile(sourcesInsideBlock, extend(context, additionalContext)) || "";
            }
            function extractSourcesInsideBlock(sources, start, end) {
              var sourcesInsideBlock = sources.splice(start + 1, end - start);
              sourcesInsideBlock.pop();
              return sourcesInsideBlock;
            }
            function handleBlockHelper(helperKeyword, sourcesToEnd, context) {
              var executeBlockHelper = BLOCK_HELPERS[helperKeyword];
              var helperCount = 1;
              var startBlockIndex = 0;
              var endBlockIndex;
              var index = startBlockIndex + EXPRESSION_INTERVAL;
              var expression = sourcesToEnd[index];
              while (helperCount && isString(expression)) {
                if (expression.indexOf(helperKeyword) === 0) {
                  helperCount += 1;
                } else if (expression.indexOf("/" + helperKeyword) === 0) {
                  helperCount -= 1;
                  endBlockIndex = index;
                }
                index += EXPRESSION_INTERVAL;
                expression = sourcesToEnd[index];
              }
              if (helperCount) {
                throw Error(helperKeyword + " needs {{/" + helperKeyword + "}} expression.");
              }
              sourcesToEnd[startBlockIndex] = executeBlockHelper(
                sourcesToEnd[startBlockIndex].split(" ").slice(1),
                extractSourcesInsideBlock(sourcesToEnd, startBlockIndex, endBlockIndex),
                context
              );
              return sourcesToEnd;
            }
            function handleExpression(exps, context) {
              var result = getValueFromContext(exps[0], context);
              if (result instanceof Function) {
                return executeFunction(result, exps.slice(1), context);
              }
              return result;
            }
            function executeFunction(helper, argExps, context) {
              var args = [];
              forEach(argExps, function(exp) {
                args.push(getValueFromContext(exp, context));
              });
              return helper.apply(null, args);
            }
            function compile(sources, context) {
              var index = 1;
              var expression = sources[index];
              var exps, firstExp, result;
              while (isString(expression)) {
                exps = expression.split(" ");
                firstExp = exps[0];
                if (BLOCK_HELPERS[firstExp]) {
                  result = handleBlockHelper(firstExp, sources.splice(index, sources.length - index), context);
                  sources = sources.concat(result);
                } else {
                  sources[index] = handleExpression(exps, context);
                }
                index += EXPRESSION_INTERVAL;
                expression = sources[index];
              }
              return sources.join("");
            }
            function template(text, context) {
              return compile(splitByRegExp(text, EXPRESSION_REGEXP), context);
            }
            module2.exports = template;
          },
          /* 53 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var isArray = __webpack_require__(1);
            function getMousePosition(position, relativeElement) {
              var positionArray = isArray(position);
              var clientX = positionArray ? position[0] : position.clientX;
              var clientY = positionArray ? position[1] : position.clientY;
              var rect;
              if (!relativeElement) {
                return [clientX, clientY];
              }
              rect = relativeElement.getBoundingClientRect();
              return [
                clientX - rect.left - relativeElement.clientLeft,
                clientY - rect.top - relativeElement.clientTop
              ];
            }
            module2.exports = getMousePosition;
          },
          /* 54 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var matches = __webpack_require__(55);
            function closest(element, selector) {
              var parent = element.parentNode;
              if (matches(element, selector)) {
                return element;
              }
              while (parent && parent !== document) {
                if (matches(parent, selector)) {
                  return parent;
                }
                parent = parent.parentNode;
              }
              return null;
            }
            module2.exports = closest;
          },
          /* 55 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var inArray = __webpack_require__(5);
            var toArray = __webpack_require__(56);
            var elProto = Element.prototype;
            var matchSelector = elProto.matches || elProto.webkitMatchesSelector || elProto.mozMatchesSelector || elProto.msMatchesSelector || function(selector) {
              var doc = this.document || this.ownerDocument;
              return inArray(this, toArray(doc.querySelectorAll(selector))) > -1;
            };
            function matches(element, selector) {
              return matchSelector.call(element, selector);
            }
            module2.exports = matches;
          },
          /* 56 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var forEachArray = __webpack_require__(6);
            function toArray(arrayLike) {
              var arr;
              try {
                arr = Array.prototype.slice.call(arrayLike);
              } catch (e) {
                arr = [];
                forEachArray(arrayLike, function(value) {
                  arr.push(value);
                });
              }
              return arr;
            }
            module2.exports = toArray;
          },
          /* 57 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            (function(global) {
              var isOldBrowser = __webpack_require__(4).isOldBrowser;
              var layout = ['<div class="{{cssPrefix}}slider-left {{cssPrefix}}slider-part">{{slider}}</div>', '<div class="{{cssPrefix}}slider-right {{cssPrefix}}slider-part">{{huebar}}</div>'].join("\n");
              var SVGSlider = ['<svg class="{{cssPrefix}}svg {{cssPrefix}}svg-slider">', "<defs>", '<linearGradient id="{{cssPrefix}}svg-fill-color-{{id}}" x1="0%" y1="0%" x2="100%" y2="0%">', '<stop offset="0%" stop-color="rgb(255,255,255)" />', '<stop class="{{cssPrefix}}slider-basecolor" offset="100%" stop-color="rgb(255,0,0)" />', "</linearGradient>", '<linearGradient id="{{cssPrefix}}svn-fill-black-{{id}}" x1="0%" y1="0%" x2="0%" y2="100%">', '<stop offset="0%" style="stop-color:rgb(0,0,0);stop-opacity:0" />', '<stop offset="100%" style="stop-color:rgb(0,0,0);stop-opacity:1" />', "</linearGradient>", "</defs>", '<rect width="100%" height="100%" fill="url(#{{cssPrefix}}svg-fill-color-{{id}})"></rect>', '<rect width="100%" height="100%" fill="url(#{{cssPrefix}}svn-fill-black-{{id}})"></rect>', '<path transform="translate(0,0)" class="{{cssPrefix}}slider-handle" d="M0 7.5 L15 7.5 M7.5 15 L7.5 0 M2 7 a5.5 5.5 0 1 1 0 1 Z" stroke="black" stroke-width="0.75" fill="none" />', "</svg>"].join("\n");
              var VMLSlider = ['<div class="{{cssPrefix}}vml-slider">', '<v:rect strokecolor="none" class="{{cssPrefix}}vml {{cssPrefix}}vml-slider-bg">', '<v:fill class="{{cssPrefix}}vml {{cssPrefix}}slider-basecolor" type="gradient" method="none" color="#ff0000" color2="#fff" angle="90" />', "</v:rect>", '<v:rect strokecolor="#ccc" class="{{cssPrefix}}vml {{cssPrefix}}vml-slider-bg">', '<v:fill type="gradient" method="none" color="black" color2="white" o:opacity2="0%" class="{{cssPrefix}}vml" />', "</v:rect>", '<v:shape class="{{cssPrefix}}vml {{cssPrefix}}slider-handle" coordsize="1 1" style="width:1px;height:1px;"path="m 0,7 l 14,7 m 7,14 l 7,0 ar 12,12 2,2 z" filled="false" stroked="true" />', "</div>"].join("\n");
              var SVGHuebar = ['<svg class="{{cssPrefix}}svg {{cssPrefix}}svg-huebar">', "<defs>", '<linearGradient id="g-{{id}}" x1="0%" y1="0%" x2="0%" y2="100%">', '<stop offset="0%" stop-color="rgb(255,0,0)" />', '<stop offset="16.666%" stop-color="rgb(255,255,0)" />', '<stop offset="33.333%" stop-color="rgb(0,255,0)" />', '<stop offset="50%" stop-color="rgb(0,255,255)" />', '<stop offset="66.666%" stop-color="rgb(0,0,255)" />', '<stop offset="83.333%" stop-color="rgb(255,0,255)" />', '<stop offset="100%" stop-color="rgb(255,0,0)" />', "</linearGradient>", "</defs>", '<rect width="18px" height="100%" fill="url(#g-{{id}})"></rect>', '<path transform="translate(-6,-3)" class="{{cssPrefix}}huebar-handle" d="M0 0 L4 4 L0 8 L0 0 Z" fill="black" stroke="none" />', "</svg>"].join("\n");
              var VMLHuebar = ['<div class="{{cssPrefix}}vml-huebar">', '<v:rect strokecolor="#ccc" class="{{cssPrefix}}vml {{cssPrefix}}vml-huebar-bg">', '<v:fill type="gradient" method="none" colors="0% rgb(255,0,0), 16.666% rgb(255,255,0), 33.333% rgb(0,255,0), 50% rgb(0,255,255), 66.666% rgb(0,0,255), 83.333% rgb(255,0,255), 100% rgb(255,0,0)" angle="180" class="{{cssPrefix}}vml" />', "</v:rect>", '<v:shape class="{{cssPrefix}}vml {{cssPrefix}}huebar-handle" coordsize="1 1" style="width:1px;height:1px;position:absolute;z-index:1;right:22px;top:-3px;"path="m 0,0 l 4,4 l 0,8 l 0,0 z" filled="true" fillcolor="black" stroked="false" />', "</div>"].join("\n");
              if (isOldBrowser) {
                global.document.namespaces.add("v", "urn:schemas-microsoft-com:vml");
              }
              module2.exports = {
                layout,
                slider: isOldBrowser ? VMLSlider : SVGSlider,
                huebar: isOldBrowser ? VMLHuebar : SVGHuebar
              };
            }).call(this, __webpack_require__(25));
          }
          /******/
        ])
      );
    });
  }
});

// node_modules/@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.js
var require_toastui_editor_plugin_color_syntax = __commonJS({
  "node_modules/@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_tui_color_picker());
      else if (typeof define === "function" && define.amd)
        define(["tui-color-picker"], factory);
      else if (typeof exports === "object")
        exports["toastui"] = factory(require_tui_color_picker());
      else
        root["toastui"] = root["toastui"] || {}, root["toastui"]["Editor"] = root["toastui"]["Editor"] || {}, root["toastui"]["Editor"]["plugin"] = root["toastui"]["Editor"]["plugin"] || {}, root["toastui"]["Editor"]["plugin"]["uml"] = factory(root["tui"]["colorPicker"]);
    })(self, function(__WEBPACK_EXTERNAL_MODULE__858__) {
      return (
        /******/
        function() {
          "use strict";
          var __webpack_modules__ = {
            /***/
            858: (
              /***/
              function(module2) {
                module2.exports = __WEBPACK_EXTERNAL_MODULE__858__;
              }
            )
            /******/
          };
          var __webpack_module_cache__ = {};
          function __webpack_require__(moduleId) {
            var cachedModule = __webpack_module_cache__[moduleId];
            if (cachedModule !== void 0) {
              return cachedModule.exports;
            }
            var module2 = __webpack_module_cache__[moduleId] = {
              /******/
              // no module.id needed
              /******/
              // no module.loaded needed
              /******/
              exports: {}
              /******/
            };
            __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__);
            return module2.exports;
          }
          !function() {
            __webpack_require__.n = function(module2) {
              var getter = module2 && module2.__esModule ? (
                /******/
                function() {
                  return module2["default"];
                }
              ) : (
                /******/
                function() {
                  return module2;
                }
              );
              __webpack_require__.d(getter, { a: getter });
              return getter;
            };
          }();
          !function() {
            __webpack_require__.d = function(exports2, definition) {
              for (var key in definition) {
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key)) {
                  Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
                }
              }
            };
          }();
          !function() {
            __webpack_require__.o = function(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            };
          }();
          var __webpack_exports__ = {};
          !function() {
            __webpack_require__.d(__webpack_exports__, {
              "default": function() {
                return (
                  /* binding */
                  colorSyntaxPlugin
                );
              }
            });
            var external_commonjs_tui_color_picker_commonjs2_tui_color_picker_amd_tui_color_picker_root_tui_colorPicker_ = __webpack_require__(858);
            var external_commonjs_tui_color_picker_commonjs2_tui_color_picker_amd_tui_color_picker_root_tui_colorPicker_default = __webpack_require__.n(external_commonjs_tui_color_picker_commonjs2_tui_color_picker_amd_tui_color_picker_root_tui_colorPicker_);
            ;
            function addLangs(i18n) {
              i18n.setLanguage("ar", {
                "Text color": "لون النص"
              });
              i18n.setLanguage(["cs", "cs-CZ"], {
                "Text color": "Barva textu"
              });
              i18n.setLanguage(["de", "de-DE"], {
                "Text color": "Textfarbe"
              });
              i18n.setLanguage(["en", "en-US"], {
                "Text color": "Text color"
              });
              i18n.setLanguage(["es", "es-ES"], {
                "Text color": "Color del texto"
              });
              i18n.setLanguage(["fi", "fi-FI"], {
                "Text color": "Tekstin väri"
              });
              i18n.setLanguage(["fr", "fr-FR"], {
                "Text color": "Couleur du texte"
              });
              i18n.setLanguage(["gl", "gl-ES"], {
                "Text color": "Cor do texto"
              });
              i18n.setLanguage(["hr", "hr-HR"], {
                "Text color": "Boja teksta"
              });
              i18n.setLanguage(["it", "it-IT"], {
                "Text color": "Colore del testo"
              });
              i18n.setLanguage(["ja", "ja-JP"], {
                "Text color": "文字色相"
              });
              i18n.setLanguage(["ko", "ko-KR"], {
                "Text color": "글자 색상"
              });
              i18n.setLanguage(["nb", "nb-NO"], {
                "Text color": "Tekstfarge"
              });
              i18n.setLanguage(["nl", "nl-NL"], {
                "Text color": "Tekstkleur"
              });
              i18n.setLanguage(["pl", "pl-PL"], {
                "Text color": "Kolor tekstu"
              });
              i18n.setLanguage(["pt", "pt-BR"], {
                "Text color": "Cor do texto"
              });
              i18n.setLanguage(["ru", "ru-RU"], {
                "Text color": "Цвет текста"
              });
              i18n.setLanguage(["sv", "sv-SE"], {
                "Text color": "Textfärg"
              });
              i18n.setLanguage(["tr", "tr-TR"], {
                "Text color": "Metin rengi"
              });
              i18n.setLanguage(["uk", "uk-UA"], {
                "Text color": "Колір тексту"
              });
              i18n.setLanguage("zh-CN", {
                "Text color": "文字颜色"
              });
              i18n.setLanguage("zh-TW", {
                "Text color": "文字顏色"
              });
            }
            ;
            function hasClass(element, className) {
              return element.classList.contains(className);
            }
            function findParentByClassName(el, className) {
              var currentEl = el;
              while (currentEl && !hasClass(currentEl, className)) {
                currentEl = currentEl.parentElement;
              }
              return currentEl;
            }
            function removeProseMirrorHackNodes(html) {
              var reProseMirrorImage = /<img class="ProseMirror-separator" alt="">/g;
              var reProseMirrorTrailingBreak = / class="ProseMirror-trailingBreak"/g;
              var resultHTML = html;
              resultHTML = resultHTML.replace(reProseMirrorImage, "");
              resultHTML = resultHTML.replace(reProseMirrorTrailingBreak, "");
              return resultHTML;
            }
            ;
            var PREFIX = "toastui-editor-";
            function createApplyButton(text) {
              var button = document.createElement("button");
              button.setAttribute("type", "button");
              button.textContent = text;
              return button;
            }
            function createToolbarItemOption(colorPickerContainer, i18n) {
              return {
                name: "color",
                tooltip: i18n.get("Text color"),
                className: PREFIX + "toolbar-icons color",
                popup: {
                  className: PREFIX + "popup-color",
                  body: colorPickerContainer,
                  style: { width: "auto" }
                }
              };
            }
            function createSelection(tr, selection, SelectionClass, openTag, closeTag) {
              var mapping = tr.mapping, doc = tr.doc;
              var from = selection.from, to = selection.to, empty = selection.empty;
              var mappedFrom = mapping.map(from) + openTag.length;
              var mappedTo = mapping.map(to) - closeTag.length;
              return empty ? SelectionClass.create(doc, mappedTo, mappedTo) : SelectionClass.create(doc, mappedFrom, mappedTo);
            }
            function getCurrentEditorEl(colorPickerEl, containerClassName2) {
              var editorDefaultEl = findParentByClassName(colorPickerEl, PREFIX + "defaultUI");
              return editorDefaultEl.querySelector("." + containerClassName2 + " .ProseMirror");
            }
            var containerClassName;
            var currentEditorEl;
            function colorSyntaxPlugin(context, options) {
              if (options === void 0) {
                options = {};
              }
              var eventEmitter = context.eventEmitter, i18n = context.i18n, _a = context.usageStatistics, usageStatistics = _a === void 0 ? true : _a, pmState = context.pmState;
              var preset = options.preset;
              var container = document.createElement("div");
              var colorPickerOption = { container, usageStatistics };
              addLangs(i18n);
              if (preset) {
                colorPickerOption.preset = preset;
              }
              var colorPicker = external_commonjs_tui_color_picker_commonjs2_tui_color_picker_amd_tui_color_picker_root_tui_colorPicker_default().create(colorPickerOption);
              var button = createApplyButton(i18n.get("OK"));
              eventEmitter.listen("focus", function(editType) {
                containerClassName = "" + PREFIX + (editType === "markdown" ? "md" : "ww") + "-container";
              });
              container.addEventListener("click", function(ev) {
                if (ev.target.getAttribute("type") === "button") {
                  var selectedColor = colorPicker.getColor();
                  currentEditorEl = getCurrentEditorEl(container, containerClassName);
                  eventEmitter.emit("command", "color", { selectedColor });
                  eventEmitter.emit("closePopup");
                  currentEditorEl.focus();
                }
              });
              colorPicker.slider.toggle(true);
              container.appendChild(button);
              var toolbarItem = createToolbarItemOption(container, i18n);
              return {
                markdownCommands: {
                  color: function(_a2, _b, dispatch) {
                    var selectedColor = _a2.selectedColor;
                    var tr = _b.tr, selection = _b.selection, schema = _b.schema;
                    if (selectedColor) {
                      var slice = selection.content();
                      var textContent = slice.content.textBetween(0, slice.content.size, "\n");
                      var openTag = '<span style="color: ' + selectedColor + '">';
                      var closeTag = "</span>";
                      var colored = "" + openTag + textContent + closeTag;
                      tr.replaceSelectionWith(schema.text(colored)).setSelection(createSelection(tr, selection, pmState.TextSelection, openTag, closeTag));
                      dispatch(tr);
                      return true;
                    }
                    return false;
                  }
                },
                wysiwygCommands: {
                  color: function(_a2, _b, dispatch) {
                    var selectedColor = _a2.selectedColor;
                    var tr = _b.tr, selection = _b.selection, schema = _b.schema;
                    if (selectedColor) {
                      var from = selection.from, to = selection.to;
                      var attrs = { htmlAttrs: { style: "color: " + selectedColor } };
                      var mark = schema.marks.span.create(attrs);
                      tr.addMark(from, to, mark);
                      dispatch(tr);
                      return true;
                    }
                    return false;
                  }
                },
                toolbarItems: [
                  {
                    groupIndex: 0,
                    itemIndex: 3,
                    item: toolbarItem
                  }
                ],
                toHTMLRenderers: {
                  htmlInline: {
                    span: function(node, _a2) {
                      var entering = _a2.entering;
                      return entering ? { type: "openTag", tagName: "span", attributes: node.attrs } : { type: "closeTag", tagName: "span" };
                    }
                  }
                }
              };
            }
          }();
          __webpack_exports__ = __webpack_exports__["default"];
          return __webpack_exports__;
        }()
      );
    });
  }
});
export default require_toastui_editor_plugin_color_syntax();
/*! Bundled license information:

tui-color-picker/dist/tui-color-picker.js:
  (*!
   * TOAST UI Color Picker
   * @version 2.2.8
   * @author NHN Cloud FE Development Team <dl_javascript@nhn.com>
   * @license MIT
   *)

@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.js:
  (*!
   * TOAST UI Editor : Color Syntax Plugin
   * @version 3.1.0 | Fri Aug 05 2022
   * @author NHN Cloud FE Development Lab <dl_javascript@nhn.com>
   * @license MIT
   *)
*/
//# sourceMappingURL=@toast-ui_editor-plugin-color-syntax.js.map
