import {
  __commonJS
} from "./chunk-USJHI7ER.js";

// node_modules/@toast-ui/editor-plugin-code-syntax-highlight/dist/toastui-editor-plugin-code-syntax-highlight.js
var require_toastui_editor_plugin_code_syntax_highlight = __commonJS({
  "node_modules/@toast-ui/editor-plugin-code-syntax-highlight/dist/toastui-editor-plugin-code-syntax-highlight.js"(exports, module) {
    (function() {
      "use strict";
      var __webpack_modules__ = {
        /***/
        928: (
          /***/
          function(module2, __unused_webpack_exports, __webpack_require__2) {
            var isArray = __webpack_require__2(322);
            function inArray(searchElement, array, startIndex) {
              var i;
              var length;
              startIndex = startIndex || 0;
              if (!isArray(array)) {
                return -1;
              }
              if (Array.prototype.indexOf) {
                return Array.prototype.indexOf.call(array, searchElement, startIndex);
              }
              length = array.length;
              for (i = startIndex; startIndex >= 0 && i < length; i += 1) {
                if (array[i] === searchElement) {
                  return i;
                }
              }
              return -1;
            }
            module2.exports = inArray;
          }
        ),
        /***/
        690: (
          /***/
          function(module2, __unused_webpack_exports, __webpack_require__2) {
            var isArray = __webpack_require__2(322);
            var forEachArray = __webpack_require__2(893);
            var forEachOwnProperties = __webpack_require__2(956);
            function forEach(obj, iteratee, context) {
              if (isArray(obj)) {
                forEachArray(obj, iteratee, context);
              } else {
                forEachOwnProperties(obj, iteratee, context);
              }
            }
            module2.exports = forEach;
          }
        ),
        /***/
        893: (
          /***/
          function(module2) {
            function forEachArray(arr, iteratee, context) {
              var index = 0;
              var len = arr.length;
              context = context || null;
              for (; index < len; index += 1) {
                if (iteratee.call(context, arr[index], index, arr) === false) {
                  break;
                }
              }
            }
            module2.exports = forEachArray;
          }
        ),
        /***/
        956: (
          /***/
          function(module2) {
            function forEachOwnProperties(obj, iteratee, context) {
              var key;
              context = context || null;
              for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                  if (iteratee.call(context, obj[key], key, obj) === false) {
                    break;
                  }
                }
              }
            }
            module2.exports = forEachOwnProperties;
          }
        ),
        /***/
        990: (
          /***/
          function(module2, __unused_webpack_exports, __webpack_require__2) {
            var forEachArray = __webpack_require__2(893);
            function toArray(arrayLike) {
              var arr;
              try {
                arr = Array.prototype.slice.call(arrayLike);
              } catch (e) {
                arr = [];
                forEachArray(arrayLike, function(value) {
                  arr.push(value);
                });
              }
              return arr;
            }
            module2.exports = toArray;
          }
        ),
        /***/
        24: (
          /***/
          function(module2, __unused_webpack_exports, __webpack_require__2) {
            var isArray = __webpack_require__2(322);
            var isUndefined = __webpack_require__2(929);
            function setClassName(element, cssClass) {
              cssClass = isArray(cssClass) ? cssClass.join(" ") : cssClass;
              cssClass = cssClass.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
              if (isUndefined(element.className.baseVal)) {
                element.className = cssClass;
                return;
              }
              element.className.baseVal = cssClass;
            }
            module2.exports = setClassName;
          }
        ),
        /***/
        204: (
          /***/
          function(module2, __unused_webpack_exports, __webpack_require__2) {
            var forEach = __webpack_require__2(690);
            var inArray = __webpack_require__2(928);
            var getClass = __webpack_require__2(902);
            var setClassName = __webpack_require__2(24);
            function addClass(element) {
              var cssClass = Array.prototype.slice.call(arguments, 1);
              var classList = element.classList;
              var newClass = [];
              var origin;
              if (classList) {
                forEach(cssClass, function(name) {
                  element.classList.add(name);
                });
                return;
              }
              origin = getClass(element);
              if (origin) {
                cssClass = [].concat(origin.split(/\s+/), cssClass);
              }
              forEach(cssClass, function(cls) {
                if (inArray(cls, newClass) < 0) {
                  newClass.push(cls);
                }
              });
              setClassName(element, newClass);
            }
            module2.exports = addClass;
          }
        ),
        /***/
        522: (
          /***/
          function(module2, __unused_webpack_exports, __webpack_require__2) {
            var isString = __webpack_require__2(758);
            var forEach = __webpack_require__2(690);
            function css(element, key, value) {
              var style = element.style;
              if (isString(key)) {
                style[key] = value;
                return;
              }
              forEach(key, function(v, k) {
                style[k] = v;
              });
            }
            module2.exports = css;
          }
        ),
        /***/
        902: (
          /***/
          function(module2, __unused_webpack_exports, __webpack_require__2) {
            var isUndefined = __webpack_require__2(929);
            function getClass(element) {
              if (!element || !element.className) {
                return "";
              }
              if (isUndefined(element.className.baseVal)) {
                return element.className;
              }
              return element.className.baseVal;
            }
            module2.exports = getClass;
          }
        ),
        /***/
        714: (
          /***/
          function(module2, __unused_webpack_exports, __webpack_require__2) {
            var inArray = __webpack_require__2(928);
            var getClass = __webpack_require__2(902);
            function hasClass(element, cssClass) {
              var origin;
              if (element.classList) {
                return element.classList.contains(cssClass);
              }
              origin = getClass(element).split(/\s+/);
              return inArray(cssClass, origin) > -1;
            }
            module2.exports = hasClass;
          }
        ),
        /***/
        462: (
          /***/
          function(module2, __unused_webpack_exports, __webpack_require__2) {
            var forEachArray = __webpack_require__2(893);
            var inArray = __webpack_require__2(928);
            var getClass = __webpack_require__2(902);
            var setClassName = __webpack_require__2(24);
            function removeClass(element) {
              var cssClass = Array.prototype.slice.call(arguments, 1);
              var classList = element.classList;
              var origin, newClass;
              if (classList) {
                forEachArray(cssClass, function(name) {
                  classList.remove(name);
                });
                return;
              }
              origin = getClass(element).split(/\s+/);
              newClass = [];
              forEachArray(origin, function(name) {
                if (inArray(name, cssClass) < 0) {
                  newClass.push(name);
                }
              });
              setClassName(element, newClass);
            }
            module2.exports = removeClass;
          }
        ),
        /***/
        322: (
          /***/
          function(module2) {
            function isArray(obj) {
              return obj instanceof Array;
            }
            module2.exports = isArray;
          }
        ),
        /***/
        294: (
          /***/
          function(module2) {
            function isFunction(obj) {
              return obj instanceof Function;
            }
            module2.exports = isFunction;
          }
        ),
        /***/
        758: (
          /***/
          function(module2) {
            function isString(obj) {
              return typeof obj === "string" || obj instanceof String;
            }
            module2.exports = isString;
          }
        ),
        /***/
        929: (
          /***/
          function(module2) {
            function isUndefined(obj) {
              return obj === void 0;
            }
            module2.exports = isUndefined;
          }
        )
        /******/
      };
      var __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (cachedModule !== void 0) {
          return cachedModule.exports;
        }
        var module2 = __webpack_module_cache__[moduleId] = {
          /******/
          // no module.id needed
          /******/
          // no module.loaded needed
          /******/
          exports: {}
          /******/
        };
        __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__);
        return module2.exports;
      }
      !function() {
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? (
            /******/
            function() {
              return module2["default"];
            }
          ) : (
            /******/
            function() {
              return module2;
            }
          );
          __webpack_require__.d(getter, { a: getter });
          return getter;
        };
      }();
      !function() {
        __webpack_require__.d = function(exports2, definition) {
          for (var key in definition) {
            if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key)) {
              Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
            }
          }
        };
      }();
      !function() {
        __webpack_require__.o = function(obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        };
      }();
      var __webpack_exports__ = {};
      !function() {
        __webpack_require__.d(__webpack_exports__, {
          "default": function() {
            return (
              /* binding */
              src
            );
          }
        });
        var isFunction = __webpack_require__(294);
        var isFunction_default = __webpack_require__.n(isFunction);
        ;
        var BACKTICK_COUNT = 3;
        function getHTMLRenderers(prism) {
          return {
            codeBlock: function(node) {
              var _a = node, fenceLength = _a.fenceLength, info = _a.info;
              var infoWords = info ? info.split(/\s+/) : [];
              var preClasses = [];
              var codeAttrs = {};
              if (fenceLength > BACKTICK_COUNT) {
                codeAttrs["data-backticks"] = fenceLength;
              }
              var content = node.literal;
              if (infoWords.length && infoWords[0].length) {
                var lang = infoWords[0];
                preClasses.push("lang-" + lang);
                codeAttrs["data-language"] = lang;
                var registeredLang = prism.languages[lang];
                if (registeredLang) {
                  content = prism.highlight(node.literal, registeredLang, lang);
                }
              }
              return [
                { type: "openTag", tagName: "pre", classNames: preClasses },
                { type: "openTag", tagName: "code", attributes: codeAttrs },
                { type: "html", content },
                { type: "closeTag", tagName: "code" },
                { type: "closeTag", tagName: "pre" }
              ];
            }
          };
        }
        var isString = __webpack_require__(758);
        var isString_default = __webpack_require__.n(isString);
        ;
        function flatten(arr) {
          return arr.reduce(function(a, b) {
            return a.concat(Array.isArray(b) ? flatten(b) : b);
          }, []);
        }
        ;
        var __spreadArray = function(to, from) {
          for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
          return to;
        };
        var NODE_TYPE = "codeBlock";
        function findCodeBlocks(doc) {
          var descendants = [];
          doc.descendants(function(node, pos) {
            if (node.isBlock && node.type.name === NODE_TYPE) {
              descendants.push({ node, pos });
            }
          });
          return descendants;
        }
        function parseTokens(tokens, classNames) {
          if (classNames === void 0) {
            classNames = [];
          }
          if (isString_default()(tokens)) {
            return [{ text: tokens, classes: classNames }];
          }
          return tokens.map(function(token) {
            var _a = token, type = _a.type, alias = _a.alias;
            var typeClassNames = [];
            var aliasClassNames = [];
            if (type) {
              typeClassNames = ["token", type];
            }
            if (alias) {
              aliasClassNames = isString_default()(alias) ? [alias] : alias;
            }
            var classes = __spreadArray(__spreadArray(__spreadArray([], classNames), typeClassNames), aliasClassNames);
            return isString_default()(token) ? {
              text: token,
              classes
            } : parseTokens(token.content, classes);
          });
        }
        function getDecorations(doc, context, prism) {
          var pmView = context.pmView;
          var decorations = [];
          var codeBlocks = findCodeBlocks(doc);
          codeBlocks.forEach(function(_a) {
            var pos = _a.pos, node = _a.node;
            var language = node.attrs.language;
            var registeredLang = prism.languages[language];
            var prismTokens = registeredLang ? prism.tokenize(node.textContent, registeredLang) : [];
            var nodeInfos = flatten(parseTokens(prismTokens));
            var startPos = pos + 1;
            nodeInfos.forEach(function(_a2) {
              var text = _a2.text, classes = _a2.classes;
              var from = startPos;
              var to = from + text.length;
              startPos = to;
              var classNames = classes.join(" ");
              var decoration = pmView.Decoration.inline(from, to, {
                class: classNames
              });
              if (classNames.length) {
                decorations.push(decoration);
              }
            });
          });
          return pmView.DecorationSet.create(doc, decorations);
        }
        function codeSyntaxHighlighting(context, prism) {
          return new context.pmState.Plugin({
            state: {
              init: function(_, _a) {
                var doc = _a.doc;
                return getDecorations(doc, context, prism);
              },
              apply: function(tr, set) {
                if (!tr.docChanged) {
                  return set.map(tr.mapping, tr.doc);
                }
                return getDecorations(tr.doc, context, prism);
              }
            },
            props: {
              decorations: function(state) {
                return this.getState(state);
              }
            }
          });
        }
        var addClass = __webpack_require__(204);
        var addClass_default = __webpack_require__.n(addClass);
        ;
        function stringToNumber(value) {
          return parseInt(value, 10);
        }
        function isPositionInBox(style, offsetX, offsetY) {
          var left = stringToNumber(style.left);
          var top = stringToNumber(style.top);
          var width = stringToNumber(style.width) + stringToNumber(style.paddingLeft) + stringToNumber(style.paddingRight);
          var height = stringToNumber(style.height) + stringToNumber(style.paddingTop) + stringToNumber(style.paddingBottom);
          return offsetX >= left && offsetX <= left + width && offsetY >= top && offsetY <= top + height;
        }
        function removeNode(node) {
          if (node.parentNode) {
            node.parentNode.removeChild(node);
          }
        }
        var CLS_PREFIX = "toastui-editor-";
        function cls() {
          var names = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            names[_i] = arguments[_i];
          }
          return names.map(function(className) {
            return "" + CLS_PREFIX + className;
          }).join(" ");
        }
        var css = __webpack_require__(522);
        var css_default = __webpack_require__.n(css);
        var removeClass = __webpack_require__(462);
        var removeClass_default = __webpack_require__.n(removeClass);
        var hasClass = __webpack_require__(714);
        var hasClass_default = __webpack_require__.n(hasClass);
        var toArray = __webpack_require__(990);
        var toArray_default = __webpack_require__.n(toArray);
        var inArray = __webpack_require__(928);
        var inArray_default = __webpack_require__.n(inArray);
        ;
        var WRAPPER_CLASS_NAME = "code-block-language";
        var INPUT_CLASS_NANE = "code-block-language-input";
        var LIST_CLASS_NAME = "code-block-language-list";
        var LANG_ATTR = "data-language";
        var CODE_BLOCK_PADDING = 10;
        function getButtonsHTML(languages) {
          return languages.map(function(language) {
            return '<button type="button" data-language="' + language + '">' + language + "</button>";
          }).join("");
        }
        var LanguageSelectBox = (
          /** @class */
          function() {
            function LanguageSelectBox2(rootEl, eventEmitter, languages) {
              var _this = this;
              this.buttons = [];
              this.prevStoredLanguage = "";
              this.onSelectToggleButton = function(ev) {
                var target = ev.target;
                var style = getComputedStyle(target, ":after");
                var offsetX = ev.offsetX, offsetY = ev.offsetY;
                if (isPositionInBox(style, offsetX, offsetY)) {
                  ev.preventDefault();
                  _this.toggleFocus();
                }
              };
              this.onSelectLanguageButtons = function(ev) {
                var target = ev.target;
                var language = target.getAttribute(LANG_ATTR);
                if (language) {
                  _this.selectLanguage(language);
                }
              };
              this.handleKeydown = function(ev) {
                var key = ev.key;
                if (key === "ArrowUp") {
                  _this.selectPrevLanguage();
                  ev.preventDefault();
                } else if (key === "ArrowDown") {
                  _this.selectNextLanguage();
                  ev.preventDefault();
                } else if (key === "Enter" || key === "Tab") {
                  _this.storeInputLanguage();
                  ev.preventDefault();
                } else {
                  _this.hideList();
                }
              };
              this.showLangugaeSelectBox = function(_a, language) {
                var top = _a.top, right = _a.right;
                if (language) {
                  _this.setLanguage(language);
                }
                _this.show();
                var width = _this.input.parentElement.getBoundingClientRect().width;
                css_default()(_this.wrapper, {
                  top: top + CODE_BLOCK_PADDING + "px",
                  left: right - width - CODE_BLOCK_PADDING + "px"
                });
                _this.toggleFocus();
              };
              this.rootEl = rootEl;
              this.eventEmitter = eventEmitter;
              this.languages = languages;
              this.createElement();
              this.bindDOMEvent();
              this.bindEvent();
            }
            LanguageSelectBox2.prototype.createElement = function() {
              this.wrapper = document.createElement("div");
              addClass_default()(this.wrapper, cls(WRAPPER_CLASS_NAME));
              this.createInputElement();
              this.createLanguageListElement();
              this.rootEl.appendChild(this.wrapper);
              this.hide();
            };
            LanguageSelectBox2.prototype.createInputElement = function() {
              var wrapper = document.createElement("span");
              addClass_default()(wrapper, cls(INPUT_CLASS_NANE));
              var input = document.createElement("input");
              input.type = "text";
              input.setAttribute("maxlength", "20");
              this.input = input;
              wrapper.appendChild(this.input);
              this.wrapper.appendChild(wrapper);
            };
            LanguageSelectBox2.prototype.createLanguageListElement = function() {
              this.list = document.createElement("div");
              addClass_default()(this.list, cls(LIST_CLASS_NAME));
              var buttonsContainer = document.createElement("div");
              addClass_default()(buttonsContainer, "buttons");
              buttonsContainer.innerHTML = getButtonsHTML(this.languages);
              this.buttons = toArray_default()(buttonsContainer.children);
              this.list.appendChild(buttonsContainer);
              this.wrapper.appendChild(this.list);
              this.activateButtonByIndex(0);
              this.hideList();
            };
            LanguageSelectBox2.prototype.bindDOMEvent = function() {
              var _this = this;
              this.wrapper.addEventListener("mousedown", this.onSelectToggleButton);
              this.input.addEventListener("keydown", this.handleKeydown);
              this.input.addEventListener("focus", function() {
                return _this.activateSelectBox();
              });
              this.input.addEventListener("blur", function() {
                return _this.inactivateSelectBox();
              });
              this.list.addEventListener("mousedown", this.onSelectLanguageButtons);
            };
            LanguageSelectBox2.prototype.bindEvent = function() {
              this.eventEmitter.listen("showCodeBlockLanguages", this.showLangugaeSelectBox);
            };
            LanguageSelectBox2.prototype.activateSelectBox = function() {
              addClass_default()(this.wrapper, "active");
              css_default()(this.list, { display: "block" });
            };
            LanguageSelectBox2.prototype.inactivateSelectBox = function() {
              this.input.value = this.prevStoredLanguage;
              removeClass_default()(this.wrapper, "active");
              this.hideList();
            };
            LanguageSelectBox2.prototype.toggleFocus = function() {
              if (hasClass_default()(this.wrapper, "active")) {
                this.input.blur();
              } else {
                this.input.focus();
              }
            };
            LanguageSelectBox2.prototype.storeInputLanguage = function() {
              var selectedLanguage = this.input.value;
              this.setLanguage(selectedLanguage);
              this.hideList();
              this.eventEmitter.emit("selectLanguage", selectedLanguage);
            };
            LanguageSelectBox2.prototype.activateButtonByIndex = function(index) {
              if (this.currentButton) {
                removeClass_default()(this.currentButton, "active");
              }
              if (this.buttons.length) {
                this.currentButton = this.buttons[index];
                this.input.value = this.currentButton.getAttribute(LANG_ATTR);
                addClass_default()(this.currentButton, "active");
                this.currentButton.scrollIntoView();
              }
            };
            LanguageSelectBox2.prototype.selectLanguage = function(selectedLanguage) {
              this.input.value = selectedLanguage;
              this.storeInputLanguage();
            };
            LanguageSelectBox2.prototype.selectPrevLanguage = function() {
              var index = inArray_default()(this.currentButton, this.buttons) - 1;
              if (index < 0) {
                index = this.buttons.length - 1;
              }
              this.activateButtonByIndex(index);
            };
            LanguageSelectBox2.prototype.selectNextLanguage = function() {
              var index = inArray_default()(this.currentButton, this.buttons) + 1;
              if (index >= this.buttons.length) {
                index = 0;
              }
              this.activateButtonByIndex(index);
            };
            LanguageSelectBox2.prototype.hideList = function() {
              css_default()(this.list, { display: "none" });
            };
            LanguageSelectBox2.prototype.show = function() {
              css_default()(this.wrapper, { display: "inline-block" });
            };
            LanguageSelectBox2.prototype.hide = function() {
              css_default()(this.wrapper, { display: "none" });
            };
            LanguageSelectBox2.prototype.setLanguage = function(language) {
              this.prevStoredLanguage = language;
              this.input.value = language;
              var item = this.buttons.filter(function(button) {
                return button.getAttribute(LANG_ATTR) === language;
              });
              if (item.length) {
                var index = inArray_default()(item[0], this.buttons);
                this.activateButtonByIndex(index);
              }
            };
            LanguageSelectBox2.prototype.destroy = function() {
              removeNode(this.wrapper);
              this.eventEmitter.removeEventHandler("showCodeBlockLanguages", this.showLangugaeSelectBox);
            };
            return LanguageSelectBox2;
          }()
        );
        ;
        var __assign = function() {
          __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                  t[p] = s[p];
            }
            return t;
          };
          return __assign.apply(this, arguments);
        };
        var codeSyntaxHighlightView_WRAPPER_CLASS_NAME = "ww-code-block-highlighting";
        function getCustomAttrs(attrs) {
          var htmlAttrs = attrs.htmlAttrs, classNames = attrs.classNames;
          return __assign(__assign({}, htmlAttrs), { class: classNames ? classNames.join(" ") : null });
        }
        var CodeSyntaxHighlightView = (
          /** @class */
          function() {
            function CodeSyntaxHighlightView2(node, view, getPos, eventEmitter, languages) {
              var _this = this;
              this.node = node;
              this.view = view;
              this.getPos = getPos;
              this.eventEmitter = eventEmitter;
              this.languages = languages;
              this.contentDOM = null;
              this.languageSelectBox = null;
              this.onSelectLanguage = function(language) {
                if (_this.languageEditing) {
                  _this.changeLanguage(language);
                }
              };
              this.onClickEditingButton = function(ev) {
                var target = ev.target;
                var style = getComputedStyle(target, ":after");
                if (style.backgroundImage !== "none" && isFunction_default()(_this.getPos)) {
                  var pos = _this.view.coordsAtPos(_this.getPos());
                  _this.openLanguageSelectBox(pos);
                }
              };
              this.finishLanguageEditing = function() {
                if (_this.languageEditing) {
                  _this.reset();
                }
              };
              this.node = node;
              this.view = view;
              this.getPos = getPos;
              this.eventEmitter = eventEmitter;
              this.languageEditing = false;
              this.languages = languages;
              this.createElement();
              this.bindDOMEvent();
              this.bindEvent();
            }
            CodeSyntaxHighlightView2.prototype.createElement = function() {
              var language = this.node.attrs.language;
              var wrapper = document.createElement("div");
              wrapper.setAttribute("data-language", language || "text");
              addClass_default()(wrapper, cls(codeSyntaxHighlightView_WRAPPER_CLASS_NAME));
              var pre = this.createCodeBlockElement();
              var code = pre.firstChild;
              if (language) {
                addClass_default()(pre, "language-" + language);
                addClass_default()(code, "language-" + language);
              }
              wrapper.appendChild(pre);
              this.dom = wrapper;
              this.contentDOM = code;
            };
            CodeSyntaxHighlightView2.prototype.createCodeBlockElement = function() {
              var pre = document.createElement("pre");
              var code = document.createElement("code");
              var language = this.node.attrs.language;
              var attrs = getCustomAttrs(this.node.attrs);
              if (language) {
                code.setAttribute("data-language", language);
              }
              Object.keys(attrs).forEach(function(attrName) {
                if (attrs[attrName]) {
                  pre.setAttribute(attrName, attrs[attrName]);
                }
              });
              pre.appendChild(code);
              return pre;
            };
            CodeSyntaxHighlightView2.prototype.bindDOMEvent = function() {
              if (this.dom) {
                this.dom.addEventListener("click", this.onClickEditingButton);
                this.view.dom.addEventListener("mousedown", this.finishLanguageEditing);
                window.addEventListener("resize", this.finishLanguageEditing);
              }
            };
            CodeSyntaxHighlightView2.prototype.bindEvent = function() {
              this.eventEmitter.listen("selectLanguage", this.onSelectLanguage);
              this.eventEmitter.listen("scroll", this.finishLanguageEditing);
              this.eventEmitter.listen("finishLanguageEditing", this.finishLanguageEditing);
            };
            CodeSyntaxHighlightView2.prototype.openLanguageSelectBox = function(pos) {
              this.languageSelectBox = new LanguageSelectBox(this.view.dom.parentElement, this.eventEmitter, this.languages);
              this.eventEmitter.emit("showCodeBlockLanguages", pos, this.node.attrs.language);
              this.languageEditing = true;
            };
            CodeSyntaxHighlightView2.prototype.changeLanguage = function(language) {
              if (isFunction_default()(this.getPos)) {
                this.reset();
                var pos = this.getPos();
                var tr = this.view.state.tr;
                tr.setNodeMarkup(pos, null, { language });
                this.view.dispatch(tr);
              }
            };
            CodeSyntaxHighlightView2.prototype.reset = function() {
              if (this.languageSelectBox) {
                this.languageSelectBox.destroy();
                this.languageSelectBox = null;
              }
              this.languageEditing = false;
            };
            CodeSyntaxHighlightView2.prototype.stopEvent = function() {
              return true;
            };
            CodeSyntaxHighlightView2.prototype.update = function(node) {
              if (!node.sameMarkup(this.node)) {
                return false;
              }
              this.node = node;
              return true;
            };
            CodeSyntaxHighlightView2.prototype.destroy = function() {
              this.reset();
              if (this.dom) {
                this.dom.removeEventListener("click", this.onClickEditingButton);
                this.view.dom.removeEventListener("mousedown", this.finishLanguageEditing);
                window.removeEventListener("resize", this.finishLanguageEditing);
              }
              this.eventEmitter.removeEventHandler("selectLanguage", this.onSelectLanguage);
              this.eventEmitter.removeEventHandler("scroll", this.finishLanguageEditing);
              this.eventEmitter.removeEventHandler("finishLanguageEditing", this.finishLanguageEditing);
            };
            return CodeSyntaxHighlightView2;
          }()
        );
        function createCodeSyntaxHighlightView(languages) {
          return function(node, view, getPos, emitter) {
            return new CodeSyntaxHighlightView(node, view, getPos, emitter, languages);
          };
        }
        ;
        function codeSyntaxHighlightPlugin(context, options) {
          if (options) {
            var eventEmitter = context.eventEmitter;
            var prism_1 = options.highlighter;
            eventEmitter.addEventType("showCodeBlockLanguages");
            eventEmitter.addEventType("selectLanguage");
            eventEmitter.addEventType("finishLanguageEditing");
            var languages_1 = prism_1.languages;
            var registerdlanguages = Object.keys(languages_1).filter(function(language) {
              return !isFunction_default()(languages_1[language]);
            });
            return {
              toHTMLRenderers: getHTMLRenderers(prism_1),
              wysiwygPlugins: [function() {
                return codeSyntaxHighlighting(context, prism_1);
              }],
              wysiwygNodeViews: {
                codeBlock: createCodeSyntaxHighlightView(registerdlanguages)
              }
            };
          }
          return {};
        }
        ;
        if (typeof window !== void 0) {
          window.Prism = window.Prism || {};
          window.Prism.manual = true;
        }
        var src = codeSyntaxHighlightPlugin;
      }();
      module.exports = __webpack_exports__["default"];
    })();
  }
});
export default require_toastui_editor_plugin_code_syntax_highlight();
/*! Bundled license information:

@toast-ui/editor-plugin-code-syntax-highlight/dist/toastui-editor-plugin-code-syntax-highlight.js:
  (*!
   * TOAST UI Editor : Code Syntax Highlight Plugin
   * @version 3.1.0 | Fri Aug 05 2022
   * @author NHN Cloud FE Development Lab <dl_javascript@nhn.com>
   * @license MIT
   *)
*/
//# sourceMappingURL=@toast-ui_editor-plugin-code-syntax-highlight.js.map
